// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.domain.purchase;

import co.qcsc.spatha.db.purchase.OrderItemRepository;
import co.qcsc.spatha.domain.product.ProductClientDataOnDemand;
import co.qcsc.spatha.domain.purchase.OrderItem;
import co.qcsc.spatha.domain.purchase.OrderItemDataOnDemand;
import co.qcsc.spatha.domain.purchase.PurchaseOrder;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect OrderItemDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OrderItemDataOnDemand: @Component;
    
    private Random OrderItemDataOnDemand.rnd = new SecureRandom();
    
    private List<OrderItem> OrderItemDataOnDemand.data;
    
    @Autowired
    ProductClientDataOnDemand OrderItemDataOnDemand.productClientDataOnDemand;
    
    @Autowired
    OrderItemRepository OrderItemDataOnDemand.orderItemRepository;
    
    public OrderItem OrderItemDataOnDemand.getNewTransientOrderItem(int index) {
        OrderItem obj = new OrderItem();
        setPurchaseOrder(obj, index);
        setQuantity(obj, index);
        return obj;
    }
    
    public void OrderItemDataOnDemand.setPurchaseOrder(OrderItem obj, int index) {
        PurchaseOrder purchaseOrder = null;
        obj.setPurchaseOrder(purchaseOrder);
    }
    
    public void OrderItemDataOnDemand.setQuantity(OrderItem obj, int index) {
        BigDecimal quantity = BigDecimal.valueOf(index);
        if (quantity.compareTo(new BigDecimal("999999999999.99")) == 1) {
            quantity = new BigDecimal("999999999999.99");
        }
        obj.setQuantity(quantity);
    }
    
    public OrderItem OrderItemDataOnDemand.getSpecificOrderItem(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        OrderItem obj = data.get(index);
        Long id = obj.getId();
        return orderItemRepository.findOne(id);
    }
    
    public OrderItem OrderItemDataOnDemand.getRandomOrderItem() {
        init();
        OrderItem obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return orderItemRepository.findOne(id);
    }
    
    public boolean OrderItemDataOnDemand.modifyOrderItem(OrderItem obj) {
        return false;
    }
    
    public void OrderItemDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = orderItemRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'OrderItem' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<OrderItem>();
        for (int i = 0; i < 10; i++) {
            OrderItem obj = getNewTransientOrderItem(i);
            try {
                orderItemRepository.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            orderItemRepository.flush();
            data.add(obj);
        }
    }
    
}
