// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.domain.purchase;

import co.qcsc.spatha.db.purchase.PurchaseOrderRepository;
import co.qcsc.spatha.domain.purchase.PurchaseOrder;
import co.qcsc.spatha.domain.purchase.PurchaseOrderDataOnDemand;
import co.qcsc.spatha.domain.thirdparty.ClientDataOnDemand;
import co.qcsc.spatha.domain.thirdparty.SupplierDataOnDemand;
import co.qcsc.spatha.service.purchase.PurchaseOrderService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PurchaseOrderDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PurchaseOrderDataOnDemand: @Component;
    
    private Random PurchaseOrderDataOnDemand.rnd = new SecureRandom();
    
    private List<PurchaseOrder> PurchaseOrderDataOnDemand.data;
    
    @Autowired
    ClientDataOnDemand PurchaseOrderDataOnDemand.clientDataOnDemand;
    
    @Autowired
    SupplierDataOnDemand PurchaseOrderDataOnDemand.supplierDataOnDemand;
    
    @Autowired
    PurchaseOrderService PurchaseOrderDataOnDemand.purchaseOrderService;
    
    @Autowired
    PurchaseOrderRepository PurchaseOrderDataOnDemand.purchaseOrderRepository;
    
    public PurchaseOrder PurchaseOrderDataOnDemand.getNewTransientPurchaseOrder(int index) {
        PurchaseOrder obj = new PurchaseOrder();
        setClientContact(obj, index);
        setClientEmail(obj, index);
        setClientPhone(obj, index);
        setNumberOrder(obj, index);
        setSupplierContact(obj, index);
        setSupplierEmail(obj, index);
        setSupplierPhone(obj, index);
        return obj;
    }
    
    public void PurchaseOrderDataOnDemand.setClientContact(PurchaseOrder obj, int index) {
        String clientContact = "clientContact_" + index;
        obj.setClientContact(clientContact);
    }
    
    public void PurchaseOrderDataOnDemand.setClientEmail(PurchaseOrder obj, int index) {
        String clientEmail = "foo" + index + "@bar.com";
        obj.setClientEmail(clientEmail);
    }
    
    public void PurchaseOrderDataOnDemand.setClientPhone(PurchaseOrder obj, int index) {
        String clientPhone = "clientPhone_" + index;
        obj.setClientPhone(clientPhone);
    }
    
    public void PurchaseOrderDataOnDemand.setNumberOrder(PurchaseOrder obj, int index) {
        String numberOrder = "numberOrder_" + index;
        obj.setNumberOrder(numberOrder);
    }
    
    public void PurchaseOrderDataOnDemand.setSupplierContact(PurchaseOrder obj, int index) {
        String supplierContact = "supplierContact_" + index;
        obj.setSupplierContact(supplierContact);
    }
    
    public void PurchaseOrderDataOnDemand.setSupplierEmail(PurchaseOrder obj, int index) {
        String supplierEmail = "foo" + index + "@bar.com";
        obj.setSupplierEmail(supplierEmail);
    }
    
    public void PurchaseOrderDataOnDemand.setSupplierPhone(PurchaseOrder obj, int index) {
        String supplierPhone = "supplierPhone_" + index;
        obj.setSupplierPhone(supplierPhone);
    }
    
    public PurchaseOrder PurchaseOrderDataOnDemand.getSpecificPurchaseOrder(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        PurchaseOrder obj = data.get(index);
        Long id = obj.getId();
        return purchaseOrderService.findPurchaseOrder(id);
    }
    
    public PurchaseOrder PurchaseOrderDataOnDemand.getRandomPurchaseOrder() {
        init();
        PurchaseOrder obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return purchaseOrderService.findPurchaseOrder(id);
    }
    
    public boolean PurchaseOrderDataOnDemand.modifyPurchaseOrder(PurchaseOrder obj) {
        return false;
    }
    
    public void PurchaseOrderDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = purchaseOrderService.findPurchaseOrderEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'PurchaseOrder' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<PurchaseOrder>();
        for (int i = 0; i < 10; i++) {
            PurchaseOrder obj = getNewTransientPurchaseOrder(i);
            try {
                purchaseOrderService.savePurchaseOrder(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            purchaseOrderRepository.flush();
            data.add(obj);
        }
    }
    
}
