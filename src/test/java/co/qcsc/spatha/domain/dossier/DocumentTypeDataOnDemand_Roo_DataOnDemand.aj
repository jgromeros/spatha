// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.domain.dossier;

import co.qcsc.spatha.db.dossier.DocumentTypeRepository;
import co.qcsc.spatha.domain.dossier.DocumentType;
import co.qcsc.spatha.domain.dossier.DocumentTypeDataOnDemand;
import co.qcsc.spatha.domain.dossier.DossierDescriptionDataOnDemand;
import co.qcsc.spatha.service.dossier.DocumentTypeService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DocumentTypeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DocumentTypeDataOnDemand: @Component;
    
    private Random DocumentTypeDataOnDemand.rnd = new SecureRandom();
    
    private List<DocumentType> DocumentTypeDataOnDemand.data;
    
    @Autowired
    DossierDescriptionDataOnDemand DocumentTypeDataOnDemand.dossierDescriptionDataOnDemand;
    
    @Autowired
    DocumentTypeService DocumentTypeDataOnDemand.documentTypeService;
    
    @Autowired
    DocumentTypeRepository DocumentTypeDataOnDemand.documentTypeRepository;
    
    public DocumentType DocumentTypeDataOnDemand.getNewTransientDocumentType(int index) {
        DocumentType obj = new DocumentType();
        setCode(obj, index);
        setDocumentOrder(obj, index);
        setDocumentParent(obj, index);
        setName(obj, index);
        return obj;
    }
    
    public void DocumentTypeDataOnDemand.setCode(DocumentType obj, int index) {
        String code = "code_" + index;
        obj.setCode(code);
    }
    
    public void DocumentTypeDataOnDemand.setDocumentOrder(DocumentType obj, int index) {
        Integer documentOrder = new Integer(index);
        obj.setDocumentOrder(documentOrder);
    }
    
    public void DocumentTypeDataOnDemand.setDocumentParent(DocumentType obj, int index) {
        DocumentType documentParent = obj;
        obj.setDocumentParent(documentParent);
    }
    
    public void DocumentTypeDataOnDemand.setName(DocumentType obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public DocumentType DocumentTypeDataOnDemand.getSpecificDocumentType(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DocumentType obj = data.get(index);
        Long id = obj.getId();
        return documentTypeService.findDocumentType(id);
    }
    
    public DocumentType DocumentTypeDataOnDemand.getRandomDocumentType() {
        init();
        DocumentType obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return documentTypeService.findDocumentType(id);
    }
    
    public boolean DocumentTypeDataOnDemand.modifyDocumentType(DocumentType obj) {
        return false;
    }
    
    public void DocumentTypeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = documentTypeService.findDocumentTypeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DocumentType' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DocumentType>();
        for (int i = 0; i < 10; i++) {
            DocumentType obj = getNewTransientDocumentType(i);
            try {
                documentTypeService.saveDocumentType(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            documentTypeRepository.flush();
            data.add(obj);
        }
    }
    
}
