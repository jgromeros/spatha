// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.domain.dossier;

import co.qcsc.spatha.db.dossier.DossierRepository;
import co.qcsc.spatha.domain.dossier.Dossier;
import co.qcsc.spatha.domain.dossier.DossierDataOnDemand;
import co.qcsc.spatha.domain.product.SpecialtyDataOnDemand;
import co.qcsc.spatha.domain.purchase.OrderItemDataOnDemand;
import co.qcsc.spatha.service.dossier.DossierService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DossierDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DossierDataOnDemand: @Component;
    
    private Random DossierDataOnDemand.rnd = new SecureRandom();
    
    private List<Dossier> DossierDataOnDemand.data;
    
    @Autowired
    OrderItemDataOnDemand DossierDataOnDemand.orderItemDataOnDemand;
    
    @Autowired
    SpecialtyDataOnDemand DossierDataOnDemand.specialtyDataOnDemand;
    
    @Autowired
    DossierService DossierDataOnDemand.dossierService;
    
    @Autowired
    DossierRepository DossierDataOnDemand.dossierRepository;
    
    public Dossier DossierDataOnDemand.getNewTransientDossier(int index) {
        Dossier obj = new Dossier();
        setTemplate(obj, index);
        return obj;
    }
    
    public void DossierDataOnDemand.setTemplate(Dossier obj, int index) {
        Boolean template = Boolean.TRUE;
        obj.setTemplate(template);
    }
    
    public Dossier DossierDataOnDemand.getSpecificDossier(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Dossier obj = data.get(index);
        Long id = obj.getId();
        return dossierService.findDossier(id);
    }
    
    public Dossier DossierDataOnDemand.getRandomDossier() {
        init();
        Dossier obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return dossierService.findDossier(id);
    }
    
    public boolean DossierDataOnDemand.modifyDossier(Dossier obj) {
        return false;
    }
    
    public void DossierDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = dossierService.findDossierEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Dossier' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Dossier>();
        for (int i = 0; i < 10; i++) {
            Dossier obj = getNewTransientDossier(i);
            try {
                dossierService.saveDossier(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            dossierRepository.flush();
            data.add(obj);
        }
    }
    
}
