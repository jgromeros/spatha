// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.domain.product;

import co.qcsc.spatha.db.product.ProductSpecialtyRepository;
import co.qcsc.spatha.domain.product.ProductSpecialtyDataOnDemand;
import co.qcsc.spatha.domain.product.ProductSpecialtyIntegrationTest;
import co.qcsc.spatha.service.product.ProductSpecialtyService;
import java.util.Iterator;
import java.util.List;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ProductSpecialtyIntegrationTest_Roo_IntegrationTest {
    
    declare @type: ProductSpecialtyIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: ProductSpecialtyIntegrationTest: @ContextConfiguration(locations = "classpath*:/META-INF/spring/applicationContext*.xml");
    
    declare @type: ProductSpecialtyIntegrationTest: @Transactional;
    
    @Autowired
    ProductSpecialtyDataOnDemand ProductSpecialtyIntegrationTest.dod;
    
    @Autowired
    ProductSpecialtyService ProductSpecialtyIntegrationTest.productSpecialtyService;
    
    @Autowired
    ProductSpecialtyRepository ProductSpecialtyIntegrationTest.productSpecialtyRepository;
    
    @Test
    public void ProductSpecialtyIntegrationTest.testCountAllProductSpecialtys() {
        Assert.assertNotNull("Data on demand for 'ProductSpecialty' failed to initialize correctly", dod.getRandomProductSpecialty());
        long count = productSpecialtyService.countAllProductSpecialtys();
        Assert.assertTrue("Counter for 'ProductSpecialty' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void ProductSpecialtyIntegrationTest.testFindProductSpecialty() {
        ProductSpecialty obj = dod.getRandomProductSpecialty();
        Assert.assertNotNull("Data on demand for 'ProductSpecialty' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'ProductSpecialty' failed to provide an identifier", id);
        obj = productSpecialtyService.findProductSpecialty(id);
        Assert.assertNotNull("Find method for 'ProductSpecialty' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'ProductSpecialty' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void ProductSpecialtyIntegrationTest.testFindAllProductSpecialtys() {
        Assert.assertNotNull("Data on demand for 'ProductSpecialty' failed to initialize correctly", dod.getRandomProductSpecialty());
        long count = productSpecialtyService.countAllProductSpecialtys();
        Assert.assertTrue("Too expensive to perform a find all test for 'ProductSpecialty', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<ProductSpecialty> result = productSpecialtyService.findAllProductSpecialtys();
        Assert.assertNotNull("Find all method for 'ProductSpecialty' illegally returned null", result);
        Assert.assertTrue("Find all method for 'ProductSpecialty' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void ProductSpecialtyIntegrationTest.testFindProductSpecialtyEntries() {
        Assert.assertNotNull("Data on demand for 'ProductSpecialty' failed to initialize correctly", dod.getRandomProductSpecialty());
        long count = productSpecialtyService.countAllProductSpecialtys();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<ProductSpecialty> result = productSpecialtyService.findProductSpecialtyEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'ProductSpecialty' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'ProductSpecialty' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void ProductSpecialtyIntegrationTest.testFlush() {
        ProductSpecialty obj = dod.getRandomProductSpecialty();
        Assert.assertNotNull("Data on demand for 'ProductSpecialty' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'ProductSpecialty' failed to provide an identifier", id);
        obj = productSpecialtyService.findProductSpecialty(id);
        Assert.assertNotNull("Find method for 'ProductSpecialty' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyProductSpecialty(obj);
        Integer currentVersion = obj.getVersion();
        productSpecialtyRepository.flush();
        Assert.assertTrue("Version for 'ProductSpecialty' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void ProductSpecialtyIntegrationTest.testUpdateProductSpecialtyUpdate() {
        ProductSpecialty obj = dod.getRandomProductSpecialty();
        Assert.assertNotNull("Data on demand for 'ProductSpecialty' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'ProductSpecialty' failed to provide an identifier", id);
        obj = productSpecialtyService.findProductSpecialty(id);
        boolean modified =  dod.modifyProductSpecialty(obj);
        Integer currentVersion = obj.getVersion();
        ProductSpecialty merged = productSpecialtyService.updateProductSpecialty(obj);
        productSpecialtyRepository.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'ProductSpecialty' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void ProductSpecialtyIntegrationTest.testSaveProductSpecialty() {
        Assert.assertNotNull("Data on demand for 'ProductSpecialty' failed to initialize correctly", dod.getRandomProductSpecialty());
        ProductSpecialty obj = dod.getNewTransientProductSpecialty(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'ProductSpecialty' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'ProductSpecialty' identifier to be null", obj.getId());
        try {
            productSpecialtyService.saveProductSpecialty(obj);
        } catch (final ConstraintViolationException e) {
            final StringBuilder msg = new StringBuilder();
            for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                final ConstraintViolation<?> cv = iter.next();
                msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
            }
            throw new IllegalStateException(msg.toString(), e);
        }
        productSpecialtyRepository.flush();
        Assert.assertNotNull("Expected 'ProductSpecialty' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void ProductSpecialtyIntegrationTest.testDeleteProductSpecialty() {
        ProductSpecialty obj = dod.getRandomProductSpecialty();
        Assert.assertNotNull("Data on demand for 'ProductSpecialty' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'ProductSpecialty' failed to provide an identifier", id);
        obj = productSpecialtyService.findProductSpecialty(id);
        productSpecialtyService.deleteProductSpecialty(obj);
        productSpecialtyRepository.flush();
        Assert.assertNull("Failed to remove 'ProductSpecialty' with identifier '" + id + "'", productSpecialtyService.findProductSpecialty(id));
    }
    
}
