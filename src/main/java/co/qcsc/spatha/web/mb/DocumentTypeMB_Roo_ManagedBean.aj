// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.web.mb;

import co.qcsc.spatha.domain.dossier.DocumentType;
import co.qcsc.spatha.domain.dossier.DossierDescription;
import co.qcsc.spatha.service.dossier.DocumentTypeService;
import co.qcsc.spatha.service.dossier.DossierDescriptionService;
import co.qcsc.spatha.web.mb.DocumentTypeMB;
import co.qcsc.spatha.web.mb.converter.DossierDescriptionConverter;
import co.qcsc.spatha.web.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect DocumentTypeMB_Roo_ManagedBean {
    
    declare @type: DocumentTypeMB: @ManagedBean(name = "documentTypeMB");
    
    declare @type: DocumentTypeMB: @SessionScoped;
    
    @Autowired
    DocumentTypeService DocumentTypeMB.documentTypeService;
    
    @Autowired
    DossierDescriptionService DocumentTypeMB.dossierDescriptionService;
    
    private String DocumentTypeMB.name = "DocumentTypes";
    
    private DocumentType DocumentTypeMB.documentType;
    
    private List<DocumentType> DocumentTypeMB.allDocumentTypes;
    
    private boolean DocumentTypeMB.dataVisible = false;
    
    private List<String> DocumentTypeMB.columns;
    
    private HtmlPanelGrid DocumentTypeMB.createPanelGrid;
    
    private HtmlPanelGrid DocumentTypeMB.editPanelGrid;
    
    private HtmlPanelGrid DocumentTypeMB.viewPanelGrid;
    
    private boolean DocumentTypeMB.createDialogVisible = false;
    
    @PostConstruct
    public void DocumentTypeMB.init() {
        columns = new ArrayList<String>();
        columns.add("code");
        columns.add("name");
        columns.add("documentOrder");
    }
    
    public String DocumentTypeMB.getName() {
        return name;
    }
    
    public List<String> DocumentTypeMB.getColumns() {
        return columns;
    }
    
    public List<DocumentType> DocumentTypeMB.getAllDocumentTypes() {
        return allDocumentTypes;
    }
    
    public void DocumentTypeMB.setAllDocumentTypes(List<DocumentType> allDocumentTypes) {
        this.allDocumentTypes = allDocumentTypes;
    }
    
    public String DocumentTypeMB.findAllDocumentTypes() {
        allDocumentTypes = documentTypeService.findAllDocumentTypes();
        dataVisible = !allDocumentTypes.isEmpty();
        return null;
    }
    
    public boolean DocumentTypeMB.isDataVisible() {
        return dataVisible;
    }
    
    public void DocumentTypeMB.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid DocumentTypeMB.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void DocumentTypeMB.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid DocumentTypeMB.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void DocumentTypeMB.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid DocumentTypeMB.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void DocumentTypeMB.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid DocumentTypeMB.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel codeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codeCreateOutput.setFor("codeCreateInput");
        codeCreateOutput.setId("codeCreateOutput");
        codeCreateOutput.setValue("Code:");
        htmlPanelGrid.getChildren().add(codeCreateOutput);
        
        InputText codeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codeCreateInput.setId("codeCreateInput");
        codeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{documentTypeMB.documentType.code}", String.class));
        LengthValidator codeCreateInputValidator = new LengthValidator();
        codeCreateInputValidator.setMinimum(2);
        codeCreateInput.addValidator(codeCreateInputValidator);
        codeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(codeCreateInput);
        
        Message codeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codeCreateInputMessage.setId("codeCreateInputMessage");
        codeCreateInputMessage.setFor("codeCreateInput");
        codeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codeCreateInputMessage);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{documentTypeMB.documentType.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMinimum(2);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel documentOrderCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        documentOrderCreateOutput.setFor("documentOrderCreateInput");
        documentOrderCreateOutput.setId("documentOrderCreateOutput");
        documentOrderCreateOutput.setValue("Document Order:");
        htmlPanelGrid.getChildren().add(documentOrderCreateOutput);
        
        Spinner documentOrderCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        documentOrderCreateInput.setId("documentOrderCreateInput");
        documentOrderCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{documentTypeMB.documentType.documentOrder}", Integer.class));
        documentOrderCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(documentOrderCreateInput);
        
        Message documentOrderCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        documentOrderCreateInputMessage.setId("documentOrderCreateInputMessage");
        documentOrderCreateInputMessage.setFor("documentOrderCreateInput");
        documentOrderCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(documentOrderCreateInputMessage);
        
        OutputLabel dossierDescriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dossierDescriptionCreateOutput.setFor("dossierDescriptionCreateInput");
        dossierDescriptionCreateOutput.setId("dossierDescriptionCreateOutput");
        dossierDescriptionCreateOutput.setValue("Dossier Description:");
        htmlPanelGrid.getChildren().add(dossierDescriptionCreateOutput);
        
        AutoComplete dossierDescriptionCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        dossierDescriptionCreateInput.setId("dossierDescriptionCreateInput");
        dossierDescriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{documentTypeMB.documentType.dossierDescription}", DossierDescription.class));
        dossierDescriptionCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{documentTypeMB.completeDossierDescription}", List.class, new Class[] { String.class }));
        dossierDescriptionCreateInput.setDropdown(true);
        dossierDescriptionCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "dossierDescription", String.class));
        dossierDescriptionCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{dossierDescription.name}", String.class));
        dossierDescriptionCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{dossierDescription}", DossierDescription.class));
        dossierDescriptionCreateInput.setConverter(new DossierDescriptionConverter());
        dossierDescriptionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dossierDescriptionCreateInput);
        
        Message dossierDescriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dossierDescriptionCreateInputMessage.setId("dossierDescriptionCreateInputMessage");
        dossierDescriptionCreateInputMessage.setFor("dossierDescriptionCreateInput");
        dossierDescriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dossierDescriptionCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DocumentTypeMB.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel codeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codeEditOutput.setFor("codeEditInput");
        codeEditOutput.setId("codeEditOutput");
        codeEditOutput.setValue("Code:");
        htmlPanelGrid.getChildren().add(codeEditOutput);
        
        InputText codeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codeEditInput.setId("codeEditInput");
        codeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{documentTypeMB.documentType.code}", String.class));
        LengthValidator codeEditInputValidator = new LengthValidator();
        codeEditInputValidator.setMinimum(2);
        codeEditInput.addValidator(codeEditInputValidator);
        codeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(codeEditInput);
        
        Message codeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codeEditInputMessage.setId("codeEditInputMessage");
        codeEditInputMessage.setFor("codeEditInput");
        codeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codeEditInputMessage);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{documentTypeMB.documentType.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMinimum(2);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel documentOrderEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        documentOrderEditOutput.setFor("documentOrderEditInput");
        documentOrderEditOutput.setId("documentOrderEditOutput");
        documentOrderEditOutput.setValue("Document Order:");
        htmlPanelGrid.getChildren().add(documentOrderEditOutput);
        
        Spinner documentOrderEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        documentOrderEditInput.setId("documentOrderEditInput");
        documentOrderEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{documentTypeMB.documentType.documentOrder}", Integer.class));
        documentOrderEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(documentOrderEditInput);
        
        Message documentOrderEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        documentOrderEditInputMessage.setId("documentOrderEditInputMessage");
        documentOrderEditInputMessage.setFor("documentOrderEditInput");
        documentOrderEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(documentOrderEditInputMessage);
        
        OutputLabel dossierDescriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dossierDescriptionEditOutput.setFor("dossierDescriptionEditInput");
        dossierDescriptionEditOutput.setId("dossierDescriptionEditOutput");
        dossierDescriptionEditOutput.setValue("Dossier Description:");
        htmlPanelGrid.getChildren().add(dossierDescriptionEditOutput);
        
        AutoComplete dossierDescriptionEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        dossierDescriptionEditInput.setId("dossierDescriptionEditInput");
        dossierDescriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{documentTypeMB.documentType.dossierDescription}", DossierDescription.class));
        dossierDescriptionEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{documentTypeMB.completeDossierDescription}", List.class, new Class[] { String.class }));
        dossierDescriptionEditInput.setDropdown(true);
        dossierDescriptionEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "dossierDescription", String.class));
        dossierDescriptionEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{dossierDescription.name}", String.class));
        dossierDescriptionEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{dossierDescription}", DossierDescription.class));
        dossierDescriptionEditInput.setConverter(new DossierDescriptionConverter());
        dossierDescriptionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dossierDescriptionEditInput);
        
        Message dossierDescriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dossierDescriptionEditInputMessage.setId("dossierDescriptionEditInputMessage");
        dossierDescriptionEditInputMessage.setFor("dossierDescriptionEditInput");
        dossierDescriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dossierDescriptionEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DocumentTypeMB.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText codeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codeLabel.setId("codeLabel");
        codeLabel.setValue("Code:");
        htmlPanelGrid.getChildren().add(codeLabel);
        
        HtmlOutputText codeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codeValue.setId("codeValue");
        codeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{documentTypeMB.documentType.code}", String.class));
        htmlPanelGrid.getChildren().add(codeValue);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{documentTypeMB.documentType.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText documentOrderLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentOrderLabel.setId("documentOrderLabel");
        documentOrderLabel.setValue("Document Order:");
        htmlPanelGrid.getChildren().add(documentOrderLabel);
        
        HtmlOutputText documentOrderValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentOrderValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{documentTypeMB.documentType.documentOrder}", String.class));
        htmlPanelGrid.getChildren().add(documentOrderValue);
        
        HtmlOutputText dossierDescriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dossierDescriptionLabel.setId("dossierDescriptionLabel");
        dossierDescriptionLabel.setValue("Dossier Description:");
        htmlPanelGrid.getChildren().add(dossierDescriptionLabel);
        
        HtmlOutputText dossierDescriptionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dossierDescriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{documentTypeMB.documentType.dossierDescription}", DossierDescription.class));
        dossierDescriptionValue.setConverter(new DossierDescriptionConverter());
        htmlPanelGrid.getChildren().add(dossierDescriptionValue);
        
        return htmlPanelGrid;
    }
    
    public DocumentType DocumentTypeMB.getDocumentType() {
        if (documentType == null) {
            documentType = new DocumentType();
        }
        return documentType;
    }
    
    public void DocumentTypeMB.setDocumentType(DocumentType documentType) {
        this.documentType = documentType;
    }
    
    public List<DossierDescription> DocumentTypeMB.completeDossierDescription(String query) {
        List<DossierDescription> suggestions = new ArrayList<DossierDescription>();
        for (DossierDescription dossierDescription : dossierDescriptionService.findAllDossierDescriptions()) {
            String dossierDescriptionStr = String.valueOf(dossierDescription.getName());
            if (dossierDescriptionStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(dossierDescription);
            }
        }
        return suggestions;
    }
    
    public String DocumentTypeMB.onEdit() {
        return null;
    }
    
    public boolean DocumentTypeMB.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void DocumentTypeMB.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String DocumentTypeMB.displayList() {
        createDialogVisible = false;
        findAllDocumentTypes();
        return "documentType";
    }
    
    public String DocumentTypeMB.displayCreateDialog() {
        documentType = new DocumentType();
        createDialogVisible = true;
        return "documentType";
    }
    
    public String DocumentTypeMB.persist() {
        String message = "";
        if (documentType.getId() != null) {
            documentTypeService.updateDocumentType(documentType);
            message = "message_successfully_updated";
        } else {
            documentTypeService.saveDocumentType(documentType);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "DocumentType");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDocumentTypes();
    }
    
    public String DocumentTypeMB.delete() {
        documentTypeService.deleteDocumentType(documentType);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "DocumentType");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDocumentTypes();
    }
    
    public void DocumentTypeMB.reset() {
        documentType = null;
        createDialogVisible = false;
    }
    
    public void DocumentTypeMB.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
