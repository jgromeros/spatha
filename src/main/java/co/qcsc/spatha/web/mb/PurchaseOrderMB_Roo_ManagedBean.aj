// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.web.mb;

import co.qcsc.spatha.domain.purchase.PurchaseOrder;
import co.qcsc.spatha.domain.thirdparty.Client;
import co.qcsc.spatha.domain.thirdparty.Supplier;
import co.qcsc.spatha.service.purchase.PurchaseOrderService;
import co.qcsc.spatha.service.thirdparty.ClientService;
import co.qcsc.spatha.service.thirdparty.SupplierService;
import co.qcsc.spatha.web.mb.PurchaseOrderMB;
import co.qcsc.spatha.web.mb.converter.ClientConverter;
import co.qcsc.spatha.web.mb.converter.SupplierConverter;
import co.qcsc.spatha.web.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect PurchaseOrderMB_Roo_ManagedBean {
    
    declare @type: PurchaseOrderMB: @ManagedBean(name = "purchaseOrderMB");
    
    declare @type: PurchaseOrderMB: @SessionScoped;
    
    @Autowired
    PurchaseOrderService PurchaseOrderMB.purchaseOrderService;
    
    @Autowired
    ClientService PurchaseOrderMB.clientService;
    
    @Autowired
    SupplierService PurchaseOrderMB.supplierService;
    
    private String PurchaseOrderMB.name = "PurchaseOrders";
    
    private PurchaseOrder PurchaseOrderMB.purchaseOrder;
    
    private List<PurchaseOrder> PurchaseOrderMB.allPurchaseOrders;
    
    private boolean PurchaseOrderMB.dataVisible = false;
    
    private List<String> PurchaseOrderMB.columns;
    
    private HtmlPanelGrid PurchaseOrderMB.createPanelGrid;
    
    private HtmlPanelGrid PurchaseOrderMB.editPanelGrid;
    
    private HtmlPanelGrid PurchaseOrderMB.viewPanelGrid;
    
    private boolean PurchaseOrderMB.createDialogVisible = false;
    
    @PostConstruct
    public void PurchaseOrderMB.init() {
        columns = new ArrayList<String>();
        columns.add("numberOrder");
        columns.add("supplierContact");
        columns.add("clientContact");
        columns.add("supplierPhone");
        columns.add("clientPhone");
    }
    
    public String PurchaseOrderMB.getName() {
        return name;
    }
    
    public List<String> PurchaseOrderMB.getColumns() {
        return columns;
    }
    
    public List<PurchaseOrder> PurchaseOrderMB.getAllPurchaseOrders() {
        return allPurchaseOrders;
    }
    
    public void PurchaseOrderMB.setAllPurchaseOrders(List<PurchaseOrder> allPurchaseOrders) {
        this.allPurchaseOrders = allPurchaseOrders;
    }
    
    public String PurchaseOrderMB.findAllPurchaseOrders() {
        allPurchaseOrders = purchaseOrderService.findAllPurchaseOrders();
        dataVisible = !allPurchaseOrders.isEmpty();
        return null;
    }
    
    public boolean PurchaseOrderMB.isDataVisible() {
        return dataVisible;
    }
    
    public void PurchaseOrderMB.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PurchaseOrderMB.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PurchaseOrderMB.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PurchaseOrderMB.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PurchaseOrderMB.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PurchaseOrderMB.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PurchaseOrderMB.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PurchaseOrderMB.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel numberOrderCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numberOrderCreateOutput.setFor("numberOrderCreateInput");
        numberOrderCreateOutput.setId("numberOrderCreateOutput");
        numberOrderCreateOutput.setValue("Number Order:");
        htmlPanelGrid.getChildren().add(numberOrderCreateOutput);
        
        InputText numberOrderCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        numberOrderCreateInput.setId("numberOrderCreateInput");
        numberOrderCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.numberOrder}", String.class));
        numberOrderCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(numberOrderCreateInput);
        
        Message numberOrderCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numberOrderCreateInputMessage.setId("numberOrderCreateInputMessage");
        numberOrderCreateInputMessage.setFor("numberOrderCreateInput");
        numberOrderCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numberOrderCreateInputMessage);
        
        OutputLabel supplierContactCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        supplierContactCreateOutput.setFor("supplierContactCreateInput");
        supplierContactCreateOutput.setId("supplierContactCreateOutput");
        supplierContactCreateOutput.setValue("Supplier Contact:");
        htmlPanelGrid.getChildren().add(supplierContactCreateOutput);
        
        InputText supplierContactCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        supplierContactCreateInput.setId("supplierContactCreateInput");
        supplierContactCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.supplierContact}", String.class));
        supplierContactCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(supplierContactCreateInput);
        
        Message supplierContactCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        supplierContactCreateInputMessage.setId("supplierContactCreateInputMessage");
        supplierContactCreateInputMessage.setFor("supplierContactCreateInput");
        supplierContactCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(supplierContactCreateInputMessage);
        
        OutputLabel clientContactCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        clientContactCreateOutput.setFor("clientContactCreateInput");
        clientContactCreateOutput.setId("clientContactCreateOutput");
        clientContactCreateOutput.setValue("Client Contact:");
        htmlPanelGrid.getChildren().add(clientContactCreateOutput);
        
        InputText clientContactCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        clientContactCreateInput.setId("clientContactCreateInput");
        clientContactCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.clientContact}", String.class));
        clientContactCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(clientContactCreateInput);
        
        Message clientContactCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        clientContactCreateInputMessage.setId("clientContactCreateInputMessage");
        clientContactCreateInputMessage.setFor("clientContactCreateInput");
        clientContactCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(clientContactCreateInputMessage);
        
        OutputLabel supplierPhoneCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        supplierPhoneCreateOutput.setFor("supplierPhoneCreateInput");
        supplierPhoneCreateOutput.setId("supplierPhoneCreateOutput");
        supplierPhoneCreateOutput.setValue("Supplier Phone:");
        htmlPanelGrid.getChildren().add(supplierPhoneCreateOutput);
        
        InputText supplierPhoneCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        supplierPhoneCreateInput.setId("supplierPhoneCreateInput");
        supplierPhoneCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.supplierPhone}", String.class));
        supplierPhoneCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(supplierPhoneCreateInput);
        
        Message supplierPhoneCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        supplierPhoneCreateInputMessage.setId("supplierPhoneCreateInputMessage");
        supplierPhoneCreateInputMessage.setFor("supplierPhoneCreateInput");
        supplierPhoneCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(supplierPhoneCreateInputMessage);
        
        OutputLabel clientPhoneCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        clientPhoneCreateOutput.setFor("clientPhoneCreateInput");
        clientPhoneCreateOutput.setId("clientPhoneCreateOutput");
        clientPhoneCreateOutput.setValue("Client Phone:");
        htmlPanelGrid.getChildren().add(clientPhoneCreateOutput);
        
        InputText clientPhoneCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        clientPhoneCreateInput.setId("clientPhoneCreateInput");
        clientPhoneCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.clientPhone}", String.class));
        clientPhoneCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(clientPhoneCreateInput);
        
        Message clientPhoneCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        clientPhoneCreateInputMessage.setId("clientPhoneCreateInputMessage");
        clientPhoneCreateInputMessage.setFor("clientPhoneCreateInput");
        clientPhoneCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(clientPhoneCreateInputMessage);
        
        OutputLabel supplierEmailCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        supplierEmailCreateOutput.setFor("supplierEmailCreateInput");
        supplierEmailCreateOutput.setId("supplierEmailCreateOutput");
        supplierEmailCreateOutput.setValue("Supplier Email:");
        htmlPanelGrid.getChildren().add(supplierEmailCreateOutput);
        
        InputText supplierEmailCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        supplierEmailCreateInput.setId("supplierEmailCreateInput");
        supplierEmailCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.supplierEmail}", String.class));
        supplierEmailCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(supplierEmailCreateInput);
        
        Message supplierEmailCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        supplierEmailCreateInputMessage.setId("supplierEmailCreateInputMessage");
        supplierEmailCreateInputMessage.setFor("supplierEmailCreateInput");
        supplierEmailCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(supplierEmailCreateInputMessage);
        
        OutputLabel clientEmailCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        clientEmailCreateOutput.setFor("clientEmailCreateInput");
        clientEmailCreateOutput.setId("clientEmailCreateOutput");
        clientEmailCreateOutput.setValue("Client Email:");
        htmlPanelGrid.getChildren().add(clientEmailCreateOutput);
        
        InputText clientEmailCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        clientEmailCreateInput.setId("clientEmailCreateInput");
        clientEmailCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.clientEmail}", String.class));
        clientEmailCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(clientEmailCreateInput);
        
        Message clientEmailCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        clientEmailCreateInputMessage.setId("clientEmailCreateInputMessage");
        clientEmailCreateInputMessage.setFor("clientEmailCreateInput");
        clientEmailCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(clientEmailCreateInputMessage);
        
        OutputLabel clientCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        clientCreateOutput.setFor("clientCreateInput");
        clientCreateOutput.setId("clientCreateOutput");
        clientCreateOutput.setValue("Client:");
        htmlPanelGrid.getChildren().add(clientCreateOutput);
        
        AutoComplete clientCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        clientCreateInput.setId("clientCreateInput");
        clientCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.client}", Client.class));
        clientCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{purchaseOrderMB.completeClient}", List.class, new Class[] { String.class }));
        clientCreateInput.setDropdown(true);
        clientCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "client", String.class));
        clientCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{client.identification} #{client.name}", String.class));
        clientCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{client}", Client.class));
        clientCreateInput.setConverter(new ClientConverter());
        clientCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(clientCreateInput);
        
        Message clientCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        clientCreateInputMessage.setId("clientCreateInputMessage");
        clientCreateInputMessage.setFor("clientCreateInput");
        clientCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(clientCreateInputMessage);
        
        OutputLabel supplierCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        supplierCreateOutput.setFor("supplierCreateInput");
        supplierCreateOutput.setId("supplierCreateOutput");
        supplierCreateOutput.setValue("Supplier:");
        htmlPanelGrid.getChildren().add(supplierCreateOutput);
        
        AutoComplete supplierCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        supplierCreateInput.setId("supplierCreateInput");
        supplierCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.supplier}", Supplier.class));
        supplierCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{purchaseOrderMB.completeSupplier}", List.class, new Class[] { String.class }));
        supplierCreateInput.setDropdown(true);
        supplierCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "supplier", String.class));
        supplierCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{supplier.identification} #{supplier.name}", String.class));
        supplierCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{supplier}", Supplier.class));
        supplierCreateInput.setConverter(new SupplierConverter());
        supplierCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(supplierCreateInput);
        
        Message supplierCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        supplierCreateInputMessage.setId("supplierCreateInputMessage");
        supplierCreateInputMessage.setFor("supplierCreateInput");
        supplierCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(supplierCreateInputMessage);
        
        OutputLabel itemsCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itemsCreateOutput.setFor("itemsCreateInput");
        itemsCreateOutput.setId("itemsCreateOutput");
        itemsCreateOutput.setValue("Items:");
        htmlPanelGrid.getChildren().add(itemsCreateOutput);
        
        InputText itemsCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        itemsCreateInput.setId("itemsCreateInput");
        itemsCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.items}", Set.class));
        itemsCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(itemsCreateInput);
        
        Message itemsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itemsCreateInputMessage.setId("itemsCreateInputMessage");
        itemsCreateInputMessage.setFor("itemsCreateInput");
        itemsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itemsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PurchaseOrderMB.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel numberOrderEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numberOrderEditOutput.setFor("numberOrderEditInput");
        numberOrderEditOutput.setId("numberOrderEditOutput");
        numberOrderEditOutput.setValue("Number Order:");
        htmlPanelGrid.getChildren().add(numberOrderEditOutput);
        
        InputText numberOrderEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        numberOrderEditInput.setId("numberOrderEditInput");
        numberOrderEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.numberOrder}", String.class));
        numberOrderEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(numberOrderEditInput);
        
        Message numberOrderEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numberOrderEditInputMessage.setId("numberOrderEditInputMessage");
        numberOrderEditInputMessage.setFor("numberOrderEditInput");
        numberOrderEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numberOrderEditInputMessage);
        
        OutputLabel supplierContactEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        supplierContactEditOutput.setFor("supplierContactEditInput");
        supplierContactEditOutput.setId("supplierContactEditOutput");
        supplierContactEditOutput.setValue("Supplier Contact:");
        htmlPanelGrid.getChildren().add(supplierContactEditOutput);
        
        InputText supplierContactEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        supplierContactEditInput.setId("supplierContactEditInput");
        supplierContactEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.supplierContact}", String.class));
        supplierContactEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(supplierContactEditInput);
        
        Message supplierContactEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        supplierContactEditInputMessage.setId("supplierContactEditInputMessage");
        supplierContactEditInputMessage.setFor("supplierContactEditInput");
        supplierContactEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(supplierContactEditInputMessage);
        
        OutputLabel clientContactEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        clientContactEditOutput.setFor("clientContactEditInput");
        clientContactEditOutput.setId("clientContactEditOutput");
        clientContactEditOutput.setValue("Client Contact:");
        htmlPanelGrid.getChildren().add(clientContactEditOutput);
        
        InputText clientContactEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        clientContactEditInput.setId("clientContactEditInput");
        clientContactEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.clientContact}", String.class));
        clientContactEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(clientContactEditInput);
        
        Message clientContactEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        clientContactEditInputMessage.setId("clientContactEditInputMessage");
        clientContactEditInputMessage.setFor("clientContactEditInput");
        clientContactEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(clientContactEditInputMessage);
        
        OutputLabel supplierPhoneEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        supplierPhoneEditOutput.setFor("supplierPhoneEditInput");
        supplierPhoneEditOutput.setId("supplierPhoneEditOutput");
        supplierPhoneEditOutput.setValue("Supplier Phone:");
        htmlPanelGrid.getChildren().add(supplierPhoneEditOutput);
        
        InputText supplierPhoneEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        supplierPhoneEditInput.setId("supplierPhoneEditInput");
        supplierPhoneEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.supplierPhone}", String.class));
        supplierPhoneEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(supplierPhoneEditInput);
        
        Message supplierPhoneEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        supplierPhoneEditInputMessage.setId("supplierPhoneEditInputMessage");
        supplierPhoneEditInputMessage.setFor("supplierPhoneEditInput");
        supplierPhoneEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(supplierPhoneEditInputMessage);
        
        OutputLabel clientPhoneEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        clientPhoneEditOutput.setFor("clientPhoneEditInput");
        clientPhoneEditOutput.setId("clientPhoneEditOutput");
        clientPhoneEditOutput.setValue("Client Phone:");
        htmlPanelGrid.getChildren().add(clientPhoneEditOutput);
        
        InputText clientPhoneEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        clientPhoneEditInput.setId("clientPhoneEditInput");
        clientPhoneEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.clientPhone}", String.class));
        clientPhoneEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(clientPhoneEditInput);
        
        Message clientPhoneEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        clientPhoneEditInputMessage.setId("clientPhoneEditInputMessage");
        clientPhoneEditInputMessage.setFor("clientPhoneEditInput");
        clientPhoneEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(clientPhoneEditInputMessage);
        
        OutputLabel supplierEmailEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        supplierEmailEditOutput.setFor("supplierEmailEditInput");
        supplierEmailEditOutput.setId("supplierEmailEditOutput");
        supplierEmailEditOutput.setValue("Supplier Email:");
        htmlPanelGrid.getChildren().add(supplierEmailEditOutput);
        
        InputText supplierEmailEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        supplierEmailEditInput.setId("supplierEmailEditInput");
        supplierEmailEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.supplierEmail}", String.class));
        supplierEmailEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(supplierEmailEditInput);
        
        Message supplierEmailEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        supplierEmailEditInputMessage.setId("supplierEmailEditInputMessage");
        supplierEmailEditInputMessage.setFor("supplierEmailEditInput");
        supplierEmailEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(supplierEmailEditInputMessage);
        
        OutputLabel clientEmailEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        clientEmailEditOutput.setFor("clientEmailEditInput");
        clientEmailEditOutput.setId("clientEmailEditOutput");
        clientEmailEditOutput.setValue("Client Email:");
        htmlPanelGrid.getChildren().add(clientEmailEditOutput);
        
        InputText clientEmailEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        clientEmailEditInput.setId("clientEmailEditInput");
        clientEmailEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.clientEmail}", String.class));
        clientEmailEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(clientEmailEditInput);
        
        Message clientEmailEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        clientEmailEditInputMessage.setId("clientEmailEditInputMessage");
        clientEmailEditInputMessage.setFor("clientEmailEditInput");
        clientEmailEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(clientEmailEditInputMessage);
        
        OutputLabel clientEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        clientEditOutput.setFor("clientEditInput");
        clientEditOutput.setId("clientEditOutput");
        clientEditOutput.setValue("Client:");
        htmlPanelGrid.getChildren().add(clientEditOutput);
        
        AutoComplete clientEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        clientEditInput.setId("clientEditInput");
        clientEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.client}", Client.class));
        clientEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{purchaseOrderMB.completeClient}", List.class, new Class[] { String.class }));
        clientEditInput.setDropdown(true);
        clientEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "client", String.class));
        clientEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{client.identification} #{client.name}", String.class));
        clientEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{client}", Client.class));
        clientEditInput.setConverter(new ClientConverter());
        clientEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(clientEditInput);
        
        Message clientEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        clientEditInputMessage.setId("clientEditInputMessage");
        clientEditInputMessage.setFor("clientEditInput");
        clientEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(clientEditInputMessage);
        
        OutputLabel supplierEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        supplierEditOutput.setFor("supplierEditInput");
        supplierEditOutput.setId("supplierEditOutput");
        supplierEditOutput.setValue("Supplier:");
        htmlPanelGrid.getChildren().add(supplierEditOutput);
        
        AutoComplete supplierEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        supplierEditInput.setId("supplierEditInput");
        supplierEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.supplier}", Supplier.class));
        supplierEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{purchaseOrderMB.completeSupplier}", List.class, new Class[] { String.class }));
        supplierEditInput.setDropdown(true);
        supplierEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "supplier", String.class));
        supplierEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{supplier.identification} #{supplier.name}", String.class));
        supplierEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{supplier}", Supplier.class));
        supplierEditInput.setConverter(new SupplierConverter());
        supplierEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(supplierEditInput);
        
        Message supplierEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        supplierEditInputMessage.setId("supplierEditInputMessage");
        supplierEditInputMessage.setFor("supplierEditInput");
        supplierEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(supplierEditInputMessage);
        
        OutputLabel itemsEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itemsEditOutput.setFor("itemsEditInput");
        itemsEditOutput.setId("itemsEditOutput");
        itemsEditOutput.setValue("Items:");
        htmlPanelGrid.getChildren().add(itemsEditOutput);
        
        InputText itemsEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        itemsEditInput.setId("itemsEditInput");
        itemsEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.items}", Set.class));
        itemsEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(itemsEditInput);
        
        Message itemsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itemsEditInputMessage.setId("itemsEditInputMessage");
        itemsEditInputMessage.setFor("itemsEditInput");
        itemsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itemsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PurchaseOrderMB.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText numberOrderLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numberOrderLabel.setId("numberOrderLabel");
        numberOrderLabel.setValue("Number Order:");
        htmlPanelGrid.getChildren().add(numberOrderLabel);
        
        HtmlOutputText numberOrderValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numberOrderValue.setId("numberOrderValue");
        numberOrderValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.numberOrder}", String.class));
        htmlPanelGrid.getChildren().add(numberOrderValue);
        
        HtmlOutputText supplierContactLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        supplierContactLabel.setId("supplierContactLabel");
        supplierContactLabel.setValue("Supplier Contact:");
        htmlPanelGrid.getChildren().add(supplierContactLabel);
        
        HtmlOutputText supplierContactValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        supplierContactValue.setId("supplierContactValue");
        supplierContactValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.supplierContact}", String.class));
        htmlPanelGrid.getChildren().add(supplierContactValue);
        
        HtmlOutputText clientContactLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientContactLabel.setId("clientContactLabel");
        clientContactLabel.setValue("Client Contact:");
        htmlPanelGrid.getChildren().add(clientContactLabel);
        
        HtmlOutputText clientContactValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientContactValue.setId("clientContactValue");
        clientContactValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.clientContact}", String.class));
        htmlPanelGrid.getChildren().add(clientContactValue);
        
        HtmlOutputText supplierPhoneLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        supplierPhoneLabel.setId("supplierPhoneLabel");
        supplierPhoneLabel.setValue("Supplier Phone:");
        htmlPanelGrid.getChildren().add(supplierPhoneLabel);
        
        HtmlOutputText supplierPhoneValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        supplierPhoneValue.setId("supplierPhoneValue");
        supplierPhoneValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.supplierPhone}", String.class));
        htmlPanelGrid.getChildren().add(supplierPhoneValue);
        
        HtmlOutputText clientPhoneLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientPhoneLabel.setId("clientPhoneLabel");
        clientPhoneLabel.setValue("Client Phone:");
        htmlPanelGrid.getChildren().add(clientPhoneLabel);
        
        HtmlOutputText clientPhoneValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientPhoneValue.setId("clientPhoneValue");
        clientPhoneValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.clientPhone}", String.class));
        htmlPanelGrid.getChildren().add(clientPhoneValue);
        
        HtmlOutputText supplierEmailLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        supplierEmailLabel.setId("supplierEmailLabel");
        supplierEmailLabel.setValue("Supplier Email:");
        htmlPanelGrid.getChildren().add(supplierEmailLabel);
        
        HtmlOutputText supplierEmailValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        supplierEmailValue.setId("supplierEmailValue");
        supplierEmailValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.supplierEmail}", String.class));
        htmlPanelGrid.getChildren().add(supplierEmailValue);
        
        HtmlOutputText clientEmailLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientEmailLabel.setId("clientEmailLabel");
        clientEmailLabel.setValue("Client Email:");
        htmlPanelGrid.getChildren().add(clientEmailLabel);
        
        HtmlOutputText clientEmailValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientEmailValue.setId("clientEmailValue");
        clientEmailValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.clientEmail}", String.class));
        htmlPanelGrid.getChildren().add(clientEmailValue);
        
        HtmlOutputText clientLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientLabel.setId("clientLabel");
        clientLabel.setValue("Client:");
        htmlPanelGrid.getChildren().add(clientLabel);
        
        HtmlOutputText clientValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.client}", Client.class));
        clientValue.setConverter(new ClientConverter());
        htmlPanelGrid.getChildren().add(clientValue);
        
        HtmlOutputText supplierLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        supplierLabel.setId("supplierLabel");
        supplierLabel.setValue("Supplier:");
        htmlPanelGrid.getChildren().add(supplierLabel);
        
        HtmlOutputText supplierValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        supplierValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.supplier}", Supplier.class));
        supplierValue.setConverter(new SupplierConverter());
        htmlPanelGrid.getChildren().add(supplierValue);
        
        HtmlOutputText itemsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsLabel.setId("itemsLabel");
        itemsLabel.setValue("Items:");
        htmlPanelGrid.getChildren().add(itemsLabel);
        
        HtmlOutputText itemsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{purchaseOrderMB.purchaseOrder.items}", String.class));
        htmlPanelGrid.getChildren().add(itemsValue);
        
        return htmlPanelGrid;
    }
    
    public PurchaseOrder PurchaseOrderMB.getPurchaseOrder() {
        if (purchaseOrder == null) {
            purchaseOrder = new PurchaseOrder();
        }
        return purchaseOrder;
    }
    
    public void PurchaseOrderMB.setPurchaseOrder(PurchaseOrder purchaseOrder) {
        this.purchaseOrder = purchaseOrder;
    }
    
    public List<Client> PurchaseOrderMB.completeClient(String query) {
        List<Client> suggestions = new ArrayList<Client>();
        for (Client client : clientService.findAllClients()) {
            String clientStr = String.valueOf(client.getIdentification() +  " "  + client.getName());
            if (clientStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(client);
            }
        }
        return suggestions;
    }
    
    public List<Supplier> PurchaseOrderMB.completeSupplier(String query) {
        List<Supplier> suggestions = new ArrayList<Supplier>();
        for (Supplier supplier : supplierService.findAllSuppliers()) {
            String supplierStr = String.valueOf(supplier.getIdentification() +  " "  + supplier.getName());
            if (supplierStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(supplier);
            }
        }
        return suggestions;
    }
    
    public String PurchaseOrderMB.onEdit() {
        return null;
    }
    
    public boolean PurchaseOrderMB.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PurchaseOrderMB.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PurchaseOrderMB.displayList() {
        createDialogVisible = false;
        findAllPurchaseOrders();
        return "purchaseOrder";
    }
    
    public String PurchaseOrderMB.displayCreateDialog() {
        purchaseOrder = new PurchaseOrder();
        createDialogVisible = true;
        return "purchaseOrder";
    }
    
    public String PurchaseOrderMB.persist() {
        String message = "";
        if (purchaseOrder.getId() != null) {
            purchaseOrderService.updatePurchaseOrder(purchaseOrder);
            message = "message_successfully_updated";
        } else {
            purchaseOrderService.savePurchaseOrder(purchaseOrder);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "PurchaseOrder");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPurchaseOrders();
    }
    
    public String PurchaseOrderMB.delete() {
        purchaseOrderService.deletePurchaseOrder(purchaseOrder);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "PurchaseOrder");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPurchaseOrders();
    }
    
    public void PurchaseOrderMB.reset() {
        purchaseOrder = null;
        createDialogVisible = false;
    }
    
    public void PurchaseOrderMB.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
