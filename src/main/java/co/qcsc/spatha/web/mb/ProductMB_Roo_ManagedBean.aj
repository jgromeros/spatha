// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.web.mb;

import co.qcsc.spatha.domain.product.Family;
import co.qcsc.spatha.domain.product.Product;
import co.qcsc.spatha.domain.product.ProductClient;
import co.qcsc.spatha.service.product.FamilyService;
import co.qcsc.spatha.service.product.ProductService;
import co.qcsc.spatha.web.mb.ProductMB;
import co.qcsc.spatha.web.mb.converter.FamilyConverter;
import co.qcsc.spatha.web.mb.util.MessageFactory;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;

import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect ProductMB_Roo_ManagedBean {
    
    declare @type: ProductMB: @ManagedBean(name = "productMB");
    
    declare @type: ProductMB: @SessionScoped;
    
    @Autowired
    ProductService ProductMB.productService;
    
    @Autowired
    FamilyService ProductMB.familyService;
    
    private String ProductMB.name = "Products";
    
    private Product ProductMB.product;
    
    private List<Product> ProductMB.allProducts;
    
    private boolean ProductMB.dataVisible = false;
    
    private List<String> ProductMB.columns;
    
    private HtmlPanelGrid ProductMB.createPanelGrid;
    
    private HtmlPanelGrid ProductMB.editPanelGrid;
    
    private HtmlPanelGrid ProductMB.viewPanelGrid;
    
    private boolean ProductMB.createDialogVisible = false;
    
    private List<ProductClient> ProductMB.selectedClientProducts;
    
    @PostConstruct
    public void ProductMB.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("size");
        columns.add("type");
        columns.add("schedule");
        columns.add("material");
    }
    
    public String ProductMB.getName() {
        return name;
    }
    
    public List<String> ProductMB.getColumns() {
        return columns;
    }
    
    public List<Product> ProductMB.getAllProducts() {
        return allProducts;
    }
    
    public void ProductMB.setAllProducts(List<Product> allProducts) {
        this.allProducts = allProducts;
    }
    
    public String ProductMB.findAllProducts() {
        allProducts = productService.findAllProducts();
        dataVisible = !allProducts.isEmpty();
        return null;
    }
    
    public boolean ProductMB.isDataVisible() {
        return dataVisible;
    }
    
    public void ProductMB.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ProductMB.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ProductMB.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ProductMB.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ProductMB.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ProductMB.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ProductMB.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ProductMB.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMinimum(2);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel sizeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sizeCreateOutput.setFor("sizeCreateInput");
        sizeCreateOutput.setId("sizeCreateOutput");
        sizeCreateOutput.setValue("Size:");
        htmlPanelGrid.getChildren().add(sizeCreateOutput);
        
        InputText sizeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        sizeCreateInput.setId("sizeCreateInput");
        sizeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.size}", String.class));
        sizeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sizeCreateInput);
        
        Message sizeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sizeCreateInputMessage.setId("sizeCreateInputMessage");
        sizeCreateInputMessage.setFor("sizeCreateInput");
        sizeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sizeCreateInputMessage);
        
        OutputLabel typeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        typeCreateOutput.setFor("typeCreateInput");
        typeCreateOutput.setId("typeCreateOutput");
        typeCreateOutput.setValue("Type:");
        htmlPanelGrid.getChildren().add(typeCreateOutput);
        
        InputText typeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        typeCreateInput.setId("typeCreateInput");
        typeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.type}", String.class));
        typeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(typeCreateInput);
        
        Message typeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        typeCreateInputMessage.setId("typeCreateInputMessage");
        typeCreateInputMessage.setFor("typeCreateInput");
        typeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(typeCreateInputMessage);
        
        OutputLabel scheduleCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        scheduleCreateOutput.setFor("scheduleCreateInput");
        scheduleCreateOutput.setId("scheduleCreateOutput");
        scheduleCreateOutput.setValue("Schedule:");
        htmlPanelGrid.getChildren().add(scheduleCreateOutput);
        
        InputText scheduleCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        scheduleCreateInput.setId("scheduleCreateInput");
        scheduleCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.schedule}", String.class));
        scheduleCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(scheduleCreateInput);
        
        Message scheduleCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        scheduleCreateInputMessage.setId("scheduleCreateInputMessage");
        scheduleCreateInputMessage.setFor("scheduleCreateInput");
        scheduleCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(scheduleCreateInputMessage);
        
        OutputLabel materialCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        materialCreateOutput.setFor("materialCreateInput");
        materialCreateOutput.setId("materialCreateOutput");
        materialCreateOutput.setValue("Material:");
        htmlPanelGrid.getChildren().add(materialCreateOutput);
        
        InputText materialCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        materialCreateInput.setId("materialCreateInput");
        materialCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.material}", String.class));
        materialCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(materialCreateInput);
        
        Message materialCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        materialCreateInputMessage.setId("materialCreateInputMessage");
        materialCreateInputMessage.setFor("materialCreateInput");
        materialCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(materialCreateInputMessage);
        
        OutputLabel endingCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endingCreateOutput.setFor("endingCreateInput");
        endingCreateOutput.setId("endingCreateOutput");
        endingCreateOutput.setValue("Ending:");
        htmlPanelGrid.getChildren().add(endingCreateOutput);
        
        InputText endingCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        endingCreateInput.setId("endingCreateInput");
        endingCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.ending}", String.class));
        endingCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endingCreateInput);
        
        Message endingCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endingCreateInputMessage.setId("endingCreateInputMessage");
        endingCreateInputMessage.setFor("endingCreateInput");
        endingCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endingCreateInputMessage);
        
        OutputLabel manufacturerCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        manufacturerCreateOutput.setFor("manufacturerCreateInput");
        manufacturerCreateOutput.setId("manufacturerCreateOutput");
        manufacturerCreateOutput.setValue("Manufacturer:");
        htmlPanelGrid.getChildren().add(manufacturerCreateOutput);
        
        InputText manufacturerCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        manufacturerCreateInput.setId("manufacturerCreateInput");
        manufacturerCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.manufacturer}", String.class));
        manufacturerCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(manufacturerCreateInput);
        
        Message manufacturerCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        manufacturerCreateInputMessage.setId("manufacturerCreateInputMessage");
        manufacturerCreateInputMessage.setFor("manufacturerCreateInput");
        manufacturerCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(manufacturerCreateInputMessage);
        
        OutputLabel originCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        originCreateOutput.setFor("originCreateInput");
        originCreateOutput.setId("originCreateOutput");
        originCreateOutput.setValue("Origin:");
        htmlPanelGrid.getChildren().add(originCreateOutput);
        
        InputText originCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        originCreateInput.setId("originCreateInput");
        originCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.origin}", String.class));
        originCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(originCreateInput);
        
        Message originCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        originCreateInputMessage.setId("originCreateInputMessage");
        originCreateInputMessage.setFor("originCreateInput");
        originCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(originCreateInputMessage);
        
        OutputLabel brandCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        brandCreateOutput.setFor("brandCreateInput");
        brandCreateOutput.setId("brandCreateOutput");
        brandCreateOutput.setValue("Brand:");
        htmlPanelGrid.getChildren().add(brandCreateOutput);
        
        InputText brandCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        brandCreateInput.setId("brandCreateInput");
        brandCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.brand}", String.class));
        brandCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(brandCreateInput);
        
        Message brandCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        brandCreateInputMessage.setId("brandCreateInputMessage");
        brandCreateInputMessage.setFor("brandCreateInput");
        brandCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(brandCreateInputMessage);
        
        OutputLabel familyCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        familyCreateOutput.setFor("familyCreateInput");
        familyCreateOutput.setId("familyCreateOutput");
        familyCreateOutput.setValue("Family:");
        htmlPanelGrid.getChildren().add(familyCreateOutput);
        
        AutoComplete familyCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        familyCreateInput.setId("familyCreateInput");
        familyCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.family}", Family.class));
        familyCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{productMB.completeFamily}", List.class, new Class[] { String.class }));
        familyCreateInput.setDropdown(true);
        familyCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "family", String.class));
        familyCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{family.name}", String.class));
        familyCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{family}", Family.class));
        familyCreateInput.setConverter(new FamilyConverter());
        familyCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(familyCreateInput);
        
        Message familyCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        familyCreateInputMessage.setId("familyCreateInputMessage");
        familyCreateInputMessage.setFor("familyCreateInput");
        familyCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(familyCreateInputMessage);
        
        HtmlOutputText clientProductsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientProductsCreateOutput.setId("clientProductsCreateOutput");
        clientProductsCreateOutput.setValue("Client Products:");
        htmlPanelGrid.getChildren().add(clientProductsCreateOutput);
        
        HtmlOutputText clientProductsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientProductsCreateInput.setId("clientProductsCreateInput");
        clientProductsCreateInput.setValue("This relationship is managed from the ProductClient side");
        htmlPanelGrid.getChildren().add(clientProductsCreateInput);
        
        Message clientProductsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        clientProductsCreateInputMessage.setId("clientProductsCreateInputMessage");
        clientProductsCreateInputMessage.setFor("clientProductsCreateInput");
        clientProductsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(clientProductsCreateInputMessage);
        
        OutputLabel specialtiesCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        specialtiesCreateOutput.setFor("specialtiesCreateInput");
        specialtiesCreateOutput.setId("specialtiesCreateOutput");
        specialtiesCreateOutput.setValue("Specialties:");
        htmlPanelGrid.getChildren().add(specialtiesCreateOutput);
        
        InputText specialtiesCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        specialtiesCreateInput.setId("specialtiesCreateInput");
        specialtiesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.specialties}", Set.class));
        specialtiesCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(specialtiesCreateInput);
        
        Message specialtiesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        specialtiesCreateInputMessage.setId("specialtiesCreateInputMessage");
        specialtiesCreateInputMessage.setFor("specialtiesCreateInput");
        specialtiesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(specialtiesCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ProductMB.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMinimum(2);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel sizeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        sizeEditOutput.setFor("sizeEditInput");
        sizeEditOutput.setId("sizeEditOutput");
        sizeEditOutput.setValue("Size:");
        htmlPanelGrid.getChildren().add(sizeEditOutput);
        
        InputText sizeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        sizeEditInput.setId("sizeEditInput");
        sizeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.size}", String.class));
        sizeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(sizeEditInput);
        
        Message sizeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sizeEditInputMessage.setId("sizeEditInputMessage");
        sizeEditInputMessage.setFor("sizeEditInput");
        sizeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sizeEditInputMessage);
        
        OutputLabel typeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        typeEditOutput.setFor("typeEditInput");
        typeEditOutput.setId("typeEditOutput");
        typeEditOutput.setValue("Type:");
        htmlPanelGrid.getChildren().add(typeEditOutput);
        
        InputText typeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        typeEditInput.setId("typeEditInput");
        typeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.type}", String.class));
        typeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(typeEditInput);
        
        Message typeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        typeEditInputMessage.setId("typeEditInputMessage");
        typeEditInputMessage.setFor("typeEditInput");
        typeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(typeEditInputMessage);
        
        OutputLabel scheduleEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        scheduleEditOutput.setFor("scheduleEditInput");
        scheduleEditOutput.setId("scheduleEditOutput");
        scheduleEditOutput.setValue("Schedule:");
        htmlPanelGrid.getChildren().add(scheduleEditOutput);
        
        InputText scheduleEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        scheduleEditInput.setId("scheduleEditInput");
        scheduleEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.schedule}", String.class));
        scheduleEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(scheduleEditInput);
        
        Message scheduleEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        scheduleEditInputMessage.setId("scheduleEditInputMessage");
        scheduleEditInputMessage.setFor("scheduleEditInput");
        scheduleEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(scheduleEditInputMessage);
        
        OutputLabel materialEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        materialEditOutput.setFor("materialEditInput");
        materialEditOutput.setId("materialEditOutput");
        materialEditOutput.setValue("Material:");
        htmlPanelGrid.getChildren().add(materialEditOutput);
        
        InputText materialEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        materialEditInput.setId("materialEditInput");
        materialEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.material}", String.class));
        materialEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(materialEditInput);
        
        Message materialEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        materialEditInputMessage.setId("materialEditInputMessage");
        materialEditInputMessage.setFor("materialEditInput");
        materialEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(materialEditInputMessage);
        
        OutputLabel endingEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        endingEditOutput.setFor("endingEditInput");
        endingEditOutput.setId("endingEditOutput");
        endingEditOutput.setValue("Ending:");
        htmlPanelGrid.getChildren().add(endingEditOutput);
        
        InputText endingEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        endingEditInput.setId("endingEditInput");
        endingEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.ending}", String.class));
        endingEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(endingEditInput);
        
        Message endingEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        endingEditInputMessage.setId("endingEditInputMessage");
        endingEditInputMessage.setFor("endingEditInput");
        endingEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(endingEditInputMessage);
        
        OutputLabel manufacturerEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        manufacturerEditOutput.setFor("manufacturerEditInput");
        manufacturerEditOutput.setId("manufacturerEditOutput");
        manufacturerEditOutput.setValue("Manufacturer:");
        htmlPanelGrid.getChildren().add(manufacturerEditOutput);
        
        InputText manufacturerEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        manufacturerEditInput.setId("manufacturerEditInput");
        manufacturerEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.manufacturer}", String.class));
        manufacturerEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(manufacturerEditInput);
        
        Message manufacturerEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        manufacturerEditInputMessage.setId("manufacturerEditInputMessage");
        manufacturerEditInputMessage.setFor("manufacturerEditInput");
        manufacturerEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(manufacturerEditInputMessage);
        
        OutputLabel originEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        originEditOutput.setFor("originEditInput");
        originEditOutput.setId("originEditOutput");
        originEditOutput.setValue("Origin:");
        htmlPanelGrid.getChildren().add(originEditOutput);
        
        InputText originEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        originEditInput.setId("originEditInput");
        originEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.origin}", String.class));
        originEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(originEditInput);
        
        Message originEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        originEditInputMessage.setId("originEditInputMessage");
        originEditInputMessage.setFor("originEditInput");
        originEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(originEditInputMessage);
        
        OutputLabel brandEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        brandEditOutput.setFor("brandEditInput");
        brandEditOutput.setId("brandEditOutput");
        brandEditOutput.setValue("Brand:");
        htmlPanelGrid.getChildren().add(brandEditOutput);
        
        InputText brandEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        brandEditInput.setId("brandEditInput");
        brandEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.brand}", String.class));
        brandEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(brandEditInput);
        
        Message brandEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        brandEditInputMessage.setId("brandEditInputMessage");
        brandEditInputMessage.setFor("brandEditInput");
        brandEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(brandEditInputMessage);
        
        OutputLabel familyEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        familyEditOutput.setFor("familyEditInput");
        familyEditOutput.setId("familyEditOutput");
        familyEditOutput.setValue("Family:");
        htmlPanelGrid.getChildren().add(familyEditOutput);
        
        AutoComplete familyEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        familyEditInput.setId("familyEditInput");
        familyEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.family}", Family.class));
        familyEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{productMB.completeFamily}", List.class, new Class[] { String.class }));
        familyEditInput.setDropdown(true);
        familyEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "family", String.class));
        familyEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{family.name}", String.class));
        familyEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{family}", Family.class));
        familyEditInput.setConverter(new FamilyConverter());
        familyEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(familyEditInput);
        
        Message familyEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        familyEditInputMessage.setId("familyEditInputMessage");
        familyEditInputMessage.setFor("familyEditInput");
        familyEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(familyEditInputMessage);
        
        HtmlOutputText clientProductsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientProductsEditOutput.setId("clientProductsEditOutput");
        clientProductsEditOutput.setValue("Client Products:");
        htmlPanelGrid.getChildren().add(clientProductsEditOutput);
        
        HtmlOutputText clientProductsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientProductsEditInput.setId("clientProductsEditInput");
        clientProductsEditInput.setValue("This relationship is managed from the ProductClient side");
        htmlPanelGrid.getChildren().add(clientProductsEditInput);
        
        Message clientProductsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        clientProductsEditInputMessage.setId("clientProductsEditInputMessage");
        clientProductsEditInputMessage.setFor("clientProductsEditInput");
        clientProductsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(clientProductsEditInputMessage);
        
        OutputLabel specialtiesEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        specialtiesEditOutput.setFor("specialtiesEditInput");
        specialtiesEditOutput.setId("specialtiesEditOutput");
        specialtiesEditOutput.setValue("Specialties:");
        htmlPanelGrid.getChildren().add(specialtiesEditOutput);
        
        InputText specialtiesEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        specialtiesEditInput.setId("specialtiesEditInput");
        specialtiesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.specialties}", Set.class));
        specialtiesEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(specialtiesEditInput);
        
        Message specialtiesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        specialtiesEditInputMessage.setId("specialtiesEditInputMessage");
        specialtiesEditInputMessage.setFor("specialtiesEditInput");
        specialtiesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(specialtiesEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ProductMB.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText sizeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sizeLabel.setId("sizeLabel");
        sizeLabel.setValue("Size:");
        htmlPanelGrid.getChildren().add(sizeLabel);
        
        HtmlOutputText sizeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sizeValue.setId("sizeValue");
        sizeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.size}", String.class));
        htmlPanelGrid.getChildren().add(sizeValue);
        
        HtmlOutputText typeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        typeLabel.setId("typeLabel");
        typeLabel.setValue("Type:");
        htmlPanelGrid.getChildren().add(typeLabel);
        
        HtmlOutputText typeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        typeValue.setId("typeValue");
        typeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.type}", String.class));
        htmlPanelGrid.getChildren().add(typeValue);
        
        HtmlOutputText scheduleLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        scheduleLabel.setId("scheduleLabel");
        scheduleLabel.setValue("Schedule:");
        htmlPanelGrid.getChildren().add(scheduleLabel);
        
        HtmlOutputText scheduleValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        scheduleValue.setId("scheduleValue");
        scheduleValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.schedule}", String.class));
        htmlPanelGrid.getChildren().add(scheduleValue);
        
        HtmlOutputText materialLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        materialLabel.setId("materialLabel");
        materialLabel.setValue("Material:");
        htmlPanelGrid.getChildren().add(materialLabel);
        
        HtmlOutputText materialValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        materialValue.setId("materialValue");
        materialValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.material}", String.class));
        htmlPanelGrid.getChildren().add(materialValue);
        
        HtmlOutputText endingLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endingLabel.setId("endingLabel");
        endingLabel.setValue("Ending:");
        htmlPanelGrid.getChildren().add(endingLabel);
        
        HtmlOutputText endingValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        endingValue.setId("endingValue");
        endingValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.ending}", String.class));
        htmlPanelGrid.getChildren().add(endingValue);
        
        HtmlOutputText manufacturerLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        manufacturerLabel.setId("manufacturerLabel");
        manufacturerLabel.setValue("Manufacturer:");
        htmlPanelGrid.getChildren().add(manufacturerLabel);
        
        HtmlOutputText manufacturerValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        manufacturerValue.setId("manufacturerValue");
        manufacturerValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.manufacturer}", String.class));
        htmlPanelGrid.getChildren().add(manufacturerValue);
        
        HtmlOutputText originLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        originLabel.setId("originLabel");
        originLabel.setValue("Origin:");
        htmlPanelGrid.getChildren().add(originLabel);
        
        HtmlOutputText originValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        originValue.setId("originValue");
        originValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.origin}", String.class));
        htmlPanelGrid.getChildren().add(originValue);
        
        HtmlOutputText brandLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        brandLabel.setId("brandLabel");
        brandLabel.setValue("Brand:");
        htmlPanelGrid.getChildren().add(brandLabel);
        
        HtmlOutputText brandValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        brandValue.setId("brandValue");
        brandValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.brand}", String.class));
        htmlPanelGrid.getChildren().add(brandValue);
        
        HtmlOutputText familyLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        familyLabel.setId("familyLabel");
        familyLabel.setValue("Family:");
        htmlPanelGrid.getChildren().add(familyLabel);
        
        HtmlOutputText familyValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        familyValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.family}", Family.class));
        familyValue.setConverter(new FamilyConverter());
        htmlPanelGrid.getChildren().add(familyValue);
        
        HtmlOutputText clientProductsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientProductsLabel.setId("clientProductsLabel");
        clientProductsLabel.setValue("Client Products:");
        htmlPanelGrid.getChildren().add(clientProductsLabel);
        
        HtmlOutputText clientProductsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientProductsValue.setId("clientProductsValue");
        clientProductsValue.setValue("This relationship is managed from the ProductClient side");
        htmlPanelGrid.getChildren().add(clientProductsValue);
        
        HtmlOutputText specialtiesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        specialtiesLabel.setId("specialtiesLabel");
        specialtiesLabel.setValue("Specialties:");
        htmlPanelGrid.getChildren().add(specialtiesLabel);
        
        HtmlOutputText specialtiesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        specialtiesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productMB.product.specialties}", String.class));
        htmlPanelGrid.getChildren().add(specialtiesValue);
        
        return htmlPanelGrid;
    }
    
    public Product ProductMB.getProduct() {
        if (product == null) {
            product = new Product();
        }
        return product;
    }
    
    public void ProductMB.setProduct(Product product) {
        this.product = product;
    }
    
    public List<Family> ProductMB.completeFamily(String query) {
        List<Family> suggestions = new ArrayList<Family>();
        for (Family family : familyService.findAllFamilys()) {
            String familyStr = String.valueOf(family.getName());
            if (familyStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(family);
            }
        }
        return suggestions;
    }
    
    public List<ProductClient> ProductMB.getSelectedClientProducts() {
        return selectedClientProducts;
    }
    
    public void ProductMB.setSelectedClientProducts(List<ProductClient> selectedClientProducts) {
        if (selectedClientProducts != null) {
            product.setClientProducts(new HashSet<ProductClient>(selectedClientProducts));
        }
        this.selectedClientProducts = selectedClientProducts;
    }
    
    public String ProductMB.onEdit() {
        if (product != null && product.getClientProducts() != null) {
            selectedClientProducts = new ArrayList<ProductClient>(product.getClientProducts());
        }
        return null;
    }
    
    public boolean ProductMB.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ProductMB.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ProductMB.displayList() {
        createDialogVisible = false;
        findAllProducts();
        return "product";
    }
    
    public String ProductMB.displayCreateDialog() {
        product = new Product();
        createDialogVisible = true;
        return "product";
    }
    
    public String ProductMB.persist() {
        String message = "";
        if (product.getId() != null) {
            productService.updateProduct(product);
            message = "message_successfully_updated";
        } else {
            productService.saveProduct(product);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Product");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllProducts();
    }
    
    public String ProductMB.delete() {
        productService.deleteProduct(product);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Product");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllProducts();
    }
    
    public void ProductMB.reset() {
        product = null;
        selectedClientProducts = null;
        createDialogVisible = false;
    }
    
    public void ProductMB.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
