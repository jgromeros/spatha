// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.web.mb;

import co.qcsc.spatha.domain.thirdparty.Supplier;
import co.qcsc.spatha.service.thirdparty.SupplierService;
import co.qcsc.spatha.web.mb.SupplierMB;
import co.qcsc.spatha.web.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect SupplierMB_Roo_ManagedBean {
    
    declare @type: SupplierMB: @ManagedBean(name = "supplierMB");
    
    declare @type: SupplierMB: @SessionScoped;
    
    @Autowired
    SupplierService SupplierMB.supplierService;
    
    private String SupplierMB.name = "Suppliers";
    
    private Supplier SupplierMB.supplier;
    
    private List<Supplier> SupplierMB.allSuppliers;
    
    private boolean SupplierMB.dataVisible = false;
    
    private List<String> SupplierMB.columns;
    
    private HtmlPanelGrid SupplierMB.createPanelGrid;
    
    private HtmlPanelGrid SupplierMB.editPanelGrid;
    
    private HtmlPanelGrid SupplierMB.viewPanelGrid;
    
    private boolean SupplierMB.createDialogVisible = false;
    
    @PostConstruct
    public void SupplierMB.init() {
        columns = new ArrayList<String>();
        columns.add("identification");
        columns.add("name");
    }
    
    public String SupplierMB.getName() {
        return name;
    }
    
    public List<String> SupplierMB.getColumns() {
        return columns;
    }
    
    public List<Supplier> SupplierMB.getAllSuppliers() {
        return allSuppliers;
    }
    
    public void SupplierMB.setAllSuppliers(List<Supplier> allSuppliers) {
        this.allSuppliers = allSuppliers;
    }
    
    public String SupplierMB.findAllSuppliers() {
        allSuppliers = supplierService.findAllSuppliers();
        dataVisible = !allSuppliers.isEmpty();
        return null;
    }
    
    public boolean SupplierMB.isDataVisible() {
        return dataVisible;
    }
    
    public void SupplierMB.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid SupplierMB.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void SupplierMB.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid SupplierMB.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void SupplierMB.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid SupplierMB.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void SupplierMB.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid SupplierMB.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel identificationCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identificationCreateOutput.setFor("identificationCreateInput");
        identificationCreateOutput.setId("identificationCreateOutput");
        identificationCreateOutput.setValue("Identification:");
        htmlPanelGrid.getChildren().add(identificationCreateOutput);
        
        InputText identificationCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        identificationCreateInput.setId("identificationCreateInput");
        identificationCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{supplierMB.supplier.identification}", String.class));
        LengthValidator identificationCreateInputValidator = new LengthValidator();
        identificationCreateInputValidator.setMinimum(2);
        identificationCreateInput.addValidator(identificationCreateInputValidator);
        identificationCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(identificationCreateInput);
        
        Message identificationCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identificationCreateInputMessage.setId("identificationCreateInputMessage");
        identificationCreateInputMessage.setFor("identificationCreateInput");
        identificationCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identificationCreateInputMessage);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{supplierMB.supplier.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMinimum(2);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid SupplierMB.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel identificationEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identificationEditOutput.setFor("identificationEditInput");
        identificationEditOutput.setId("identificationEditOutput");
        identificationEditOutput.setValue("Identification:");
        htmlPanelGrid.getChildren().add(identificationEditOutput);
        
        InputText identificationEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        identificationEditInput.setId("identificationEditInput");
        identificationEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{supplierMB.supplier.identification}", String.class));
        LengthValidator identificationEditInputValidator = new LengthValidator();
        identificationEditInputValidator.setMinimum(2);
        identificationEditInput.addValidator(identificationEditInputValidator);
        identificationEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(identificationEditInput);
        
        Message identificationEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identificationEditInputMessage.setId("identificationEditInputMessage");
        identificationEditInputMessage.setFor("identificationEditInput");
        identificationEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identificationEditInputMessage);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{supplierMB.supplier.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMinimum(2);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid SupplierMB.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText identificationLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identificationLabel.setId("identificationLabel");
        identificationLabel.setValue("Identification:");
        htmlPanelGrid.getChildren().add(identificationLabel);
        
        HtmlOutputText identificationValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identificationValue.setId("identificationValue");
        identificationValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{supplierMB.supplier.identification}", String.class));
        htmlPanelGrid.getChildren().add(identificationValue);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{supplierMB.supplier.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        return htmlPanelGrid;
    }
    
    public Supplier SupplierMB.getSupplier() {
        if (supplier == null) {
            supplier = new Supplier();
        }
        return supplier;
    }
    
    public void SupplierMB.setSupplier(Supplier supplier) {
        this.supplier = supplier;
    }
    
    public String SupplierMB.onEdit() {
        return null;
    }
    
    public boolean SupplierMB.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void SupplierMB.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String SupplierMB.displayList() {
        createDialogVisible = false;
        findAllSuppliers();
        return "supplier";
    }
    
    public String SupplierMB.displayCreateDialog() {
        supplier = new Supplier();
        createDialogVisible = true;
        return "supplier";
    }
    
    public String SupplierMB.persist() {
        String message = "";
        if (supplier.getId() != null) {
            supplierService.updateSupplier(supplier);
            message = "message_successfully_updated";
        } else {
            supplierService.saveSupplier(supplier);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Supplier");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllSuppliers();
    }
    
    public String SupplierMB.delete() {
        supplierService.deleteSupplier(supplier);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Supplier");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllSuppliers();
    }
    
    public void SupplierMB.reset() {
        supplier = null;
        createDialogVisible = false;
    }
    
    public void SupplierMB.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
