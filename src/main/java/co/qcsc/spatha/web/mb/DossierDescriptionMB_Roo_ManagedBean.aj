// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.web.mb;

import co.qcsc.spatha.domain.dossier.DocumentType;
import co.qcsc.spatha.domain.dossier.DossierDescription;
import co.qcsc.spatha.domain.thirdparty.Client;
import co.qcsc.spatha.service.dossier.DossierDescriptionService;
import co.qcsc.spatha.service.thirdparty.ClientService;
import co.qcsc.spatha.web.mb.DossierDescriptionMB;
import co.qcsc.spatha.web.mb.converter.ClientConverter;
import co.qcsc.spatha.web.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect DossierDescriptionMB_Roo_ManagedBean {
    
    declare @type: DossierDescriptionMB: @ManagedBean(name = "dossierDescriptionMB");
    
    declare @type: DossierDescriptionMB: @SessionScoped;
    
    @Autowired
    DossierDescriptionService DossierDescriptionMB.dossierDescriptionService;
    
    @Autowired
    ClientService DossierDescriptionMB.clientService;
    
    private String DossierDescriptionMB.name = "DossierDescriptions";
    
    private DossierDescription DossierDescriptionMB.dossierDescription;
    
    private List<DossierDescription> DossierDescriptionMB.allDossierDescriptions;
    
    private boolean DossierDescriptionMB.dataVisible = false;
    
    private List<String> DossierDescriptionMB.columns;
    
    private HtmlPanelGrid DossierDescriptionMB.createPanelGrid;
    
    private HtmlPanelGrid DossierDescriptionMB.editPanelGrid;
    
    private HtmlPanelGrid DossierDescriptionMB.viewPanelGrid;
    
    private boolean DossierDescriptionMB.createDialogVisible = false;
    
    private List<DocumentType> DossierDescriptionMB.selectedDocumentTypes;
    
    @PostConstruct
    public void DossierDescriptionMB.init() {
        columns = new ArrayList<String>();
        columns.add("name");
    }
    
    public String DossierDescriptionMB.getName() {
        return name;
    }
    
    public List<String> DossierDescriptionMB.getColumns() {
        return columns;
    }
    
    public List<DossierDescription> DossierDescriptionMB.getAllDossierDescriptions() {
        return allDossierDescriptions;
    }
    
    public void DossierDescriptionMB.setAllDossierDescriptions(List<DossierDescription> allDossierDescriptions) {
        this.allDossierDescriptions = allDossierDescriptions;
    }
    
    public String DossierDescriptionMB.findAllDossierDescriptions() {
        allDossierDescriptions = dossierDescriptionService.findAllDossierDescriptions();
        dataVisible = !allDossierDescriptions.isEmpty();
        return null;
    }
    
    public boolean DossierDescriptionMB.isDataVisible() {
        return dataVisible;
    }
    
    public void DossierDescriptionMB.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid DossierDescriptionMB.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void DossierDescriptionMB.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid DossierDescriptionMB.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void DossierDescriptionMB.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid DossierDescriptionMB.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void DossierDescriptionMB.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid DossierDescriptionMB.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierDescriptionMB.dossierDescription.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMinimum(2);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel clientCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        clientCreateOutput.setFor("clientCreateInput");
        clientCreateOutput.setId("clientCreateOutput");
        clientCreateOutput.setValue("Client:");
        htmlPanelGrid.getChildren().add(clientCreateOutput);
        
        AutoComplete clientCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        clientCreateInput.setId("clientCreateInput");
        clientCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierDescriptionMB.dossierDescription.client}", Client.class));
        clientCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{dossierDescriptionMB.completeClient}", List.class, new Class[] { String.class }));
        clientCreateInput.setDropdown(true);
        clientCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "client", String.class));
        clientCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{client.identification} #{client.name}", String.class));
        clientCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{client}", Client.class));
        clientCreateInput.setConverter(new ClientConverter());
        clientCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(clientCreateInput);
        
        Message clientCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        clientCreateInputMessage.setId("clientCreateInputMessage");
        clientCreateInputMessage.setFor("clientCreateInput");
        clientCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(clientCreateInputMessage);
        
        HtmlOutputText documentTypesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentTypesCreateOutput.setId("documentTypesCreateOutput");
        documentTypesCreateOutput.setValue("Document Types:");
        htmlPanelGrid.getChildren().add(documentTypesCreateOutput);
        
        HtmlOutputText documentTypesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentTypesCreateInput.setId("documentTypesCreateInput");
        documentTypesCreateInput.setValue("This relationship is managed from the DocumentType side");
        htmlPanelGrid.getChildren().add(documentTypesCreateInput);
        
        Message documentTypesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        documentTypesCreateInputMessage.setId("documentTypesCreateInputMessage");
        documentTypesCreateInputMessage.setFor("documentTypesCreateInput");
        documentTypesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(documentTypesCreateInputMessage);
        
        OutputLabel validCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        validCreateOutput.setFor("validCreateInput");
        validCreateOutput.setId("validCreateOutput");
        validCreateOutput.setValue("Valid:");
        htmlPanelGrid.getChildren().add(validCreateOutput);
        
        SelectBooleanCheckbox validCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        validCreateInput.setId("validCreateInput");
        validCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierDescriptionMB.dossierDescription.valid}", Boolean.class));
        validCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(validCreateInput);
        
        Message validCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        validCreateInputMessage.setId("validCreateInputMessage");
        validCreateInputMessage.setFor("validCreateInput");
        validCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(validCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DossierDescriptionMB.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierDescriptionMB.dossierDescription.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMinimum(2);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel clientEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        clientEditOutput.setFor("clientEditInput");
        clientEditOutput.setId("clientEditOutput");
        clientEditOutput.setValue("Client:");
        htmlPanelGrid.getChildren().add(clientEditOutput);
        
        AutoComplete clientEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        clientEditInput.setId("clientEditInput");
        clientEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierDescriptionMB.dossierDescription.client}", Client.class));
        clientEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{dossierDescriptionMB.completeClient}", List.class, new Class[] { String.class }));
        clientEditInput.setDropdown(true);
        clientEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "client", String.class));
        clientEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{client.identification} #{client.name}", String.class));
        clientEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{client}", Client.class));
        clientEditInput.setConverter(new ClientConverter());
        clientEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(clientEditInput);
        
        Message clientEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        clientEditInputMessage.setId("clientEditInputMessage");
        clientEditInputMessage.setFor("clientEditInput");
        clientEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(clientEditInputMessage);
        
        HtmlOutputText documentTypesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentTypesEditOutput.setId("documentTypesEditOutput");
        documentTypesEditOutput.setValue("Document Types:");
        htmlPanelGrid.getChildren().add(documentTypesEditOutput);
        
        HtmlOutputText documentTypesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentTypesEditInput.setId("documentTypesEditInput");
        documentTypesEditInput.setValue("This relationship is managed from the DocumentType side");
        htmlPanelGrid.getChildren().add(documentTypesEditInput);
        
        Message documentTypesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        documentTypesEditInputMessage.setId("documentTypesEditInputMessage");
        documentTypesEditInputMessage.setFor("documentTypesEditInput");
        documentTypesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(documentTypesEditInputMessage);
        
        OutputLabel validEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        validEditOutput.setFor("validEditInput");
        validEditOutput.setId("validEditOutput");
        validEditOutput.setValue("Valid:");
        htmlPanelGrid.getChildren().add(validEditOutput);
        
        SelectBooleanCheckbox validEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        validEditInput.setId("validEditInput");
        validEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierDescriptionMB.dossierDescription.valid}", Boolean.class));
        validEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(validEditInput);
        
        Message validEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        validEditInputMessage.setId("validEditInputMessage");
        validEditInputMessage.setFor("validEditInput");
        validEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(validEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DossierDescriptionMB.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierDescriptionMB.dossierDescription.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText clientLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientLabel.setId("clientLabel");
        clientLabel.setValue("Client:");
        htmlPanelGrid.getChildren().add(clientLabel);
        
        HtmlOutputText clientValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        clientValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierDescriptionMB.dossierDescription.client}", Client.class));
        clientValue.setConverter(new ClientConverter());
        htmlPanelGrid.getChildren().add(clientValue);
        
        HtmlOutputText documentTypesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentTypesLabel.setId("documentTypesLabel");
        documentTypesLabel.setValue("Document Types:");
        htmlPanelGrid.getChildren().add(documentTypesLabel);
        
        HtmlOutputText documentTypesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentTypesValue.setId("documentTypesValue");
        documentTypesValue.setValue("This relationship is managed from the DocumentType side");
        htmlPanelGrid.getChildren().add(documentTypesValue);
        
        HtmlOutputText validLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        validLabel.setId("validLabel");
        validLabel.setValue("Valid:");
        htmlPanelGrid.getChildren().add(validLabel);
        
        HtmlOutputText validValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        validValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierDescriptionMB.dossierDescription.valid}", String.class));
        htmlPanelGrid.getChildren().add(validValue);
        
        return htmlPanelGrid;
    }
    
    public DossierDescription DossierDescriptionMB.getDossierDescription() {
        if (dossierDescription == null) {
            dossierDescription = new DossierDescription();
        }
        return dossierDescription;
    }
    
    public void DossierDescriptionMB.setDossierDescription(DossierDescription dossierDescription) {
        this.dossierDescription = dossierDescription;
    }
    
    public List<Client> DossierDescriptionMB.completeClient(String query) {
        List<Client> suggestions = new ArrayList<Client>();
        for (Client client : clientService.findAllClients()) {
            String clientStr = String.valueOf(client.getIdentification() +  " "  + client.getName());
            if (clientStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(client);
            }
        }
        return suggestions;
    }
    
    public List<DocumentType> DossierDescriptionMB.getSelectedDocumentTypes() {
        return selectedDocumentTypes;
    }
    
    public void DossierDescriptionMB.setSelectedDocumentTypes(List<DocumentType> selectedDocumentTypes) {
        if (selectedDocumentTypes != null) {
            dossierDescription.setDocumentTypes(new HashSet<DocumentType>(selectedDocumentTypes));
        }
        this.selectedDocumentTypes = selectedDocumentTypes;
    }
    
    public String DossierDescriptionMB.onEdit() {
        if (dossierDescription != null && dossierDescription.getDocumentTypes() != null) {
            selectedDocumentTypes = new ArrayList<DocumentType>(dossierDescription.getDocumentTypes());
        }
        return null;
    }
    
    public boolean DossierDescriptionMB.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void DossierDescriptionMB.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String DossierDescriptionMB.displayList() {
        createDialogVisible = false;
        findAllDossierDescriptions();
        return "dossierDescription";
    }
    
    public String DossierDescriptionMB.displayCreateDialog() {
        dossierDescription = new DossierDescription();
        createDialogVisible = true;
        return "dossierDescription";
    }
    
    public String DossierDescriptionMB.persist() {
        String message = "";
        if (dossierDescription.getId() != null) {
            dossierDescriptionService.updateDossierDescription(dossierDescription);
            message = "message_successfully_updated";
        } else {
            dossierDescriptionService.saveDossierDescription(dossierDescription);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "DossierDescription");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDossierDescriptions();
    }
    
    public String DossierDescriptionMB.delete() {
        dossierDescriptionService.deleteDossierDescription(dossierDescription);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "DossierDescription");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDossierDescriptions();
    }
    
    public void DossierDescriptionMB.reset() {
        dossierDescription = null;
        selectedDocumentTypes = null;
        createDialogVisible = false;
    }
    
    public void DossierDescriptionMB.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
