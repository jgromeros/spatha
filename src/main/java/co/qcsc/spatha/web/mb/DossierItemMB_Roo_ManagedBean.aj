// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.web.mb;

import co.qcsc.spatha.domain.dossier.DocumentType;
import co.qcsc.spatha.domain.dossier.Dossier;
import co.qcsc.spatha.domain.dossier.DossierItem;
import co.qcsc.spatha.domain.dossier.DossierItemFile;
import co.qcsc.spatha.service.dossier.DocumentTypeService;
import co.qcsc.spatha.service.dossier.DossierItemService;
import co.qcsc.spatha.service.dossier.DossierService;
import co.qcsc.spatha.web.mb.DossierItemMB;
import co.qcsc.spatha.web.mb.converter.DocumentTypeConverter;
import co.qcsc.spatha.web.mb.converter.DossierConverter;
import co.qcsc.spatha.web.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect DossierItemMB_Roo_ManagedBean {
    
    declare @type: DossierItemMB: @ManagedBean(name = "dossierItemMB");
    
    declare @type: DossierItemMB: @SessionScoped;
    
    @Autowired
    DossierItemService DossierItemMB.dossierItemService;
    
    @Autowired
    DocumentTypeService DossierItemMB.documentTypeService;
    
    @Autowired
    DossierService DossierItemMB.dossierService;
    
    private String DossierItemMB.name = "DossierItems";
    
    private DossierItem DossierItemMB.dossierItem;
    
    private List<DossierItem> DossierItemMB.allDossierItems;
    
    private boolean DossierItemMB.dataVisible = false;
    
    private List<String> DossierItemMB.columns;
    
    private HtmlPanelGrid DossierItemMB.createPanelGrid;
    
    private HtmlPanelGrid DossierItemMB.editPanelGrid;
    
    private HtmlPanelGrid DossierItemMB.viewPanelGrid;
    
    private boolean DossierItemMB.createDialogVisible = false;
    
    private List<DossierItemFile> DossierItemMB.selectedFiles;
    
    @PostConstruct
    public void DossierItemMB.init() {
        columns = new ArrayList<String>();
        columns.add("comment");
    }
    
    public String DossierItemMB.getName() {
        return name;
    }
    
    public List<String> DossierItemMB.getColumns() {
        return columns;
    }
    
    public List<DossierItem> DossierItemMB.getAllDossierItems() {
        return allDossierItems;
    }
    
    public void DossierItemMB.setAllDossierItems(List<DossierItem> allDossierItems) {
        this.allDossierItems = allDossierItems;
    }
    
    public String DossierItemMB.findAllDossierItems() {
        allDossierItems = dossierItemService.findAllDossierItems();
        dataVisible = !allDossierItems.isEmpty();
        return null;
    }
    
    public boolean DossierItemMB.isDataVisible() {
        return dataVisible;
    }
    
    public void DossierItemMB.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid DossierItemMB.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void DossierItemMB.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid DossierItemMB.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void DossierItemMB.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid DossierItemMB.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void DossierItemMB.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid DossierItemMB.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel documentTypeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        documentTypeCreateOutput.setFor("documentTypeCreateInput");
        documentTypeCreateOutput.setId("documentTypeCreateOutput");
        documentTypeCreateOutput.setValue("Document Type:");
        htmlPanelGrid.getChildren().add(documentTypeCreateOutput);
        
        AutoComplete documentTypeCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        documentTypeCreateInput.setId("documentTypeCreateInput");
        documentTypeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierItemMB.dossierItem.documentType}", DocumentType.class));
        documentTypeCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{dossierItemMB.completeDocumentType}", List.class, new Class[] { String.class }));
        documentTypeCreateInput.setDropdown(true);
        documentTypeCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "documentType", String.class));
        documentTypeCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{documentType.code} #{documentType.name} #{documentType.documentOrder}", String.class));
        documentTypeCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{documentType}", DocumentType.class));
        documentTypeCreateInput.setConverter(new DocumentTypeConverter());
        documentTypeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(documentTypeCreateInput);
        
        Message documentTypeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        documentTypeCreateInputMessage.setId("documentTypeCreateInputMessage");
        documentTypeCreateInputMessage.setFor("documentTypeCreateInput");
        documentTypeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(documentTypeCreateInputMessage);
        
        OutputLabel dossierCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dossierCreateOutput.setFor("dossierCreateInput");
        dossierCreateOutput.setId("dossierCreateOutput");
        dossierCreateOutput.setValue("Dossier:");
        htmlPanelGrid.getChildren().add(dossierCreateOutput);
        
        AutoComplete dossierCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        dossierCreateInput.setId("dossierCreateInput");
        dossierCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierItemMB.dossierItem.dossier}", Dossier.class));
        dossierCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{dossierItemMB.completeDossier}", List.class, new Class[] { String.class }));
        dossierCreateInput.setDropdown(true);
        dossierCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "dossier", String.class));
        dossierCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{dossier.id}", String.class));
        dossierCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{dossier}", Dossier.class));
        dossierCreateInput.setConverter(new DossierConverter());
        dossierCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dossierCreateInput);
        
        Message dossierCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dossierCreateInputMessage.setId("dossierCreateInputMessage");
        dossierCreateInputMessage.setFor("dossierCreateInput");
        dossierCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dossierCreateInputMessage);
        
        HtmlOutputText filesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        filesCreateOutput.setId("filesCreateOutput");
        filesCreateOutput.setValue("Files:");
        htmlPanelGrid.getChildren().add(filesCreateOutput);
        
        HtmlOutputText filesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        filesCreateInput.setId("filesCreateInput");
        filesCreateInput.setValue("This relationship is managed from the DossierItemFile side");
        htmlPanelGrid.getChildren().add(filesCreateInput);
        
        Message filesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        filesCreateInputMessage.setId("filesCreateInputMessage");
        filesCreateInputMessage.setFor("filesCreateInput");
        filesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(filesCreateInputMessage);
        
        OutputLabel addedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addedCreateOutput.setFor("addedCreateInput");
        addedCreateOutput.setId("addedCreateOutput");
        addedCreateOutput.setValue("Added:");
        htmlPanelGrid.getChildren().add(addedCreateOutput);
        
        SelectBooleanCheckbox addedCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        addedCreateInput.setId("addedCreateInput");
        addedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierItemMB.dossierItem.added}", Boolean.class));
        addedCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(addedCreateInput);
        
        Message addedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addedCreateInputMessage.setId("addedCreateInputMessage");
        addedCreateInputMessage.setFor("addedCreateInput");
        addedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addedCreateInputMessage);
        
        OutputLabel commentCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        commentCreateOutput.setFor("commentCreateInput");
        commentCreateOutput.setId("commentCreateOutput");
        commentCreateOutput.setValue("Comment:");
        htmlPanelGrid.getChildren().add(commentCreateOutput);
        
        InputTextarea commentCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        commentCreateInput.setId("commentCreateInput");
        commentCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierItemMB.dossierItem.comment}", String.class));
        LengthValidator commentCreateInputValidator = new LengthValidator();
        commentCreateInputValidator.setMaximum(2048);
        commentCreateInput.addValidator(commentCreateInputValidator);
        commentCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(commentCreateInput);
        
        Message commentCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        commentCreateInputMessage.setId("commentCreateInputMessage");
        commentCreateInputMessage.setFor("commentCreateInput");
        commentCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(commentCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DossierItemMB.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel documentTypeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        documentTypeEditOutput.setFor("documentTypeEditInput");
        documentTypeEditOutput.setId("documentTypeEditOutput");
        documentTypeEditOutput.setValue("Document Type:");
        htmlPanelGrid.getChildren().add(documentTypeEditOutput);
        
        AutoComplete documentTypeEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        documentTypeEditInput.setId("documentTypeEditInput");
        documentTypeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierItemMB.dossierItem.documentType}", DocumentType.class));
        documentTypeEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{dossierItemMB.completeDocumentType}", List.class, new Class[] { String.class }));
        documentTypeEditInput.setDropdown(true);
        documentTypeEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "documentType", String.class));
        documentTypeEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{documentType.code} #{documentType.name} #{documentType.documentOrder}", String.class));
        documentTypeEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{documentType}", DocumentType.class));
        documentTypeEditInput.setConverter(new DocumentTypeConverter());
        documentTypeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(documentTypeEditInput);
        
        Message documentTypeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        documentTypeEditInputMessage.setId("documentTypeEditInputMessage");
        documentTypeEditInputMessage.setFor("documentTypeEditInput");
        documentTypeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(documentTypeEditInputMessage);
        
        OutputLabel dossierEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dossierEditOutput.setFor("dossierEditInput");
        dossierEditOutput.setId("dossierEditOutput");
        dossierEditOutput.setValue("Dossier:");
        htmlPanelGrid.getChildren().add(dossierEditOutput);
        
        AutoComplete dossierEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        dossierEditInput.setId("dossierEditInput");
        dossierEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierItemMB.dossierItem.dossier}", Dossier.class));
        dossierEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{dossierItemMB.completeDossier}", List.class, new Class[] { String.class }));
        dossierEditInput.setDropdown(true);
        dossierEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "dossier", String.class));
        dossierEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{dossier.id}", String.class));
        dossierEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{dossier}", Dossier.class));
        dossierEditInput.setConverter(new DossierConverter());
        dossierEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dossierEditInput);
        
        Message dossierEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dossierEditInputMessage.setId("dossierEditInputMessage");
        dossierEditInputMessage.setFor("dossierEditInput");
        dossierEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dossierEditInputMessage);
        
        HtmlOutputText filesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        filesEditOutput.setId("filesEditOutput");
        filesEditOutput.setValue("Files:");
        htmlPanelGrid.getChildren().add(filesEditOutput);
        
        HtmlOutputText filesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        filesEditInput.setId("filesEditInput");
        filesEditInput.setValue("This relationship is managed from the DossierItemFile side");
        htmlPanelGrid.getChildren().add(filesEditInput);
        
        Message filesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        filesEditInputMessage.setId("filesEditInputMessage");
        filesEditInputMessage.setFor("filesEditInput");
        filesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(filesEditInputMessage);
        
        OutputLabel addedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addedEditOutput.setFor("addedEditInput");
        addedEditOutput.setId("addedEditOutput");
        addedEditOutput.setValue("Added:");
        htmlPanelGrid.getChildren().add(addedEditOutput);
        
        SelectBooleanCheckbox addedEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        addedEditInput.setId("addedEditInput");
        addedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierItemMB.dossierItem.added}", Boolean.class));
        addedEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(addedEditInput);
        
        Message addedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addedEditInputMessage.setId("addedEditInputMessage");
        addedEditInputMessage.setFor("addedEditInput");
        addedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addedEditInputMessage);
        
        OutputLabel commentEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        commentEditOutput.setFor("commentEditInput");
        commentEditOutput.setId("commentEditOutput");
        commentEditOutput.setValue("Comment:");
        htmlPanelGrid.getChildren().add(commentEditOutput);
        
        InputTextarea commentEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        commentEditInput.setId("commentEditInput");
        commentEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierItemMB.dossierItem.comment}", String.class));
        LengthValidator commentEditInputValidator = new LengthValidator();
        commentEditInputValidator.setMaximum(2048);
        commentEditInput.addValidator(commentEditInputValidator);
        commentEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(commentEditInput);
        
        Message commentEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        commentEditInputMessage.setId("commentEditInputMessage");
        commentEditInputMessage.setFor("commentEditInput");
        commentEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(commentEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DossierItemMB.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText documentTypeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentTypeLabel.setId("documentTypeLabel");
        documentTypeLabel.setValue("Document Type:");
        htmlPanelGrid.getChildren().add(documentTypeLabel);
        
        HtmlOutputText documentTypeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentTypeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierItemMB.dossierItem.documentType}", DocumentType.class));
        documentTypeValue.setConverter(new DocumentTypeConverter());
        htmlPanelGrid.getChildren().add(documentTypeValue);
        
        HtmlOutputText dossierLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dossierLabel.setId("dossierLabel");
        dossierLabel.setValue("Dossier:");
        htmlPanelGrid.getChildren().add(dossierLabel);
        
        HtmlOutputText dossierValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dossierValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierItemMB.dossierItem.dossier}", Dossier.class));
        dossierValue.setConverter(new DossierConverter());
        htmlPanelGrid.getChildren().add(dossierValue);
        
        HtmlOutputText filesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        filesLabel.setId("filesLabel");
        filesLabel.setValue("Files:");
        htmlPanelGrid.getChildren().add(filesLabel);
        
        HtmlOutputText filesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        filesValue.setId("filesValue");
        filesValue.setValue("This relationship is managed from the DossierItemFile side");
        htmlPanelGrid.getChildren().add(filesValue);
        
        HtmlOutputText addedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addedLabel.setId("addedLabel");
        addedLabel.setValue("Added:");
        htmlPanelGrid.getChildren().add(addedLabel);
        
        HtmlOutputText addedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierItemMB.dossierItem.added}", String.class));
        htmlPanelGrid.getChildren().add(addedValue);
        
        HtmlOutputText commentLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        commentLabel.setId("commentLabel");
        commentLabel.setValue("Comment:");
        htmlPanelGrid.getChildren().add(commentLabel);
        
        InputTextarea commentValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        commentValue.setId("commentValue");
        commentValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{dossierItemMB.dossierItem.comment}", String.class));
        commentValue.setReadonly(true);
        commentValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(commentValue);
        
        return htmlPanelGrid;
    }
    
    public DossierItem DossierItemMB.getDossierItem() {
        if (dossierItem == null) {
            dossierItem = new DossierItem();
        }
        return dossierItem;
    }
    
    public void DossierItemMB.setDossierItem(DossierItem dossierItem) {
        this.dossierItem = dossierItem;
    }
    
    public List<DocumentType> DossierItemMB.completeDocumentType(String query) {
        List<DocumentType> suggestions = new ArrayList<DocumentType>();
        for (DocumentType documentType : documentTypeService.findAllDocumentTypes()) {
            String documentTypeStr = String.valueOf(documentType.getCode() +  " "  + documentType.getName() +  " "  + documentType.getDocumentOrder());
            if (documentTypeStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(documentType);
            }
        }
        return suggestions;
    }
    
    public List<Dossier> DossierItemMB.completeDossier(String query) {
        List<Dossier> suggestions = new ArrayList<Dossier>();
        for (Dossier dossier : dossierService.findAllDossiers()) {
            String dossierStr = String.valueOf(dossier.getId());
            if (dossierStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(dossier);
            }
        }
        return suggestions;
    }
    
    public List<DossierItemFile> DossierItemMB.getSelectedFiles() {
        return selectedFiles;
    }
    
    public void DossierItemMB.setSelectedFiles(List<DossierItemFile> selectedFiles) {
        if (selectedFiles != null) {
            dossierItem.setFiles(new HashSet<DossierItemFile>(selectedFiles));
        }
        this.selectedFiles = selectedFiles;
    }
    
    public String DossierItemMB.onEdit() {
        if (dossierItem != null && dossierItem.getFiles() != null) {
            selectedFiles = new ArrayList<DossierItemFile>(dossierItem.getFiles());
        }
        return null;
    }
    
    public boolean DossierItemMB.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void DossierItemMB.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String DossierItemMB.displayList() {
        createDialogVisible = false;
        findAllDossierItems();
        return "dossierItem";
    }
    
    public String DossierItemMB.displayCreateDialog() {
        dossierItem = new DossierItem();
        createDialogVisible = true;
        return "dossierItem";
    }
    
    public String DossierItemMB.persist() {
        String message = "";
        if (dossierItem.getId() != null) {
            dossierItemService.updateDossierItem(dossierItem);
            message = "message_successfully_updated";
        } else {
            dossierItemService.saveDossierItem(dossierItem);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "DossierItem");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDossierItems();
    }
    
    public String DossierItemMB.delete() {
        dossierItemService.deleteDossierItem(dossierItem);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "DossierItem");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDossierItems();
    }
    
    public void DossierItemMB.reset() {
        dossierItem = null;
        selectedFiles = null;
        createDialogVisible = false;
    }
    
    public void DossierItemMB.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
