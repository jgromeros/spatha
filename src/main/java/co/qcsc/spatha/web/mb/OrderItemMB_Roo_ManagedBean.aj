// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.web.mb;

import co.qcsc.spatha.domain.dossier.Dossier;
import co.qcsc.spatha.domain.product.ProductClient;
import co.qcsc.spatha.domain.purchase.OrderItem;
import co.qcsc.spatha.domain.purchase.PurchaseOrder;
import co.qcsc.spatha.service.product.ProductClientService;
import co.qcsc.spatha.service.purchase.OrderItemService;
import co.qcsc.spatha.service.purchase.PurchaseOrderService;
import co.qcsc.spatha.web.mb.OrderItemMB;
import co.qcsc.spatha.web.mb.converter.ProductClientConverter;
import co.qcsc.spatha.web.mb.converter.PurchaseOrderConverter;
import co.qcsc.spatha.web.mb.util.MessageFactory;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect OrderItemMB_Roo_ManagedBean {
    
    declare @type: OrderItemMB: @ManagedBean(name = "orderItemMB");
    
    declare @type: OrderItemMB: @SessionScoped;
    
    @Autowired
    OrderItemService OrderItemMB.orderItemService;
    
    @Autowired
    PurchaseOrderService OrderItemMB.purchaseOrderService;
    
    @Autowired
    ProductClientService OrderItemMB.productClientService;
    
    private String OrderItemMB.name = "OrderItems";
    
    private OrderItem OrderItemMB.orderItem;
    
    private List<OrderItem> OrderItemMB.allOrderItems;
    
    private boolean OrderItemMB.dataVisible = false;
    
    private List<String> OrderItemMB.columns;
    
    private HtmlPanelGrid OrderItemMB.createPanelGrid;
    
    private HtmlPanelGrid OrderItemMB.editPanelGrid;
    
    private HtmlPanelGrid OrderItemMB.viewPanelGrid;
    
    private boolean OrderItemMB.createDialogVisible = false;
    
    private List<Dossier> OrderItemMB.selectedDossier;
    
    @PostConstruct
    public void OrderItemMB.init() {
        columns = new ArrayList<String>();
        columns.add("quantity");
    }
    
    public String OrderItemMB.getName() {
        return name;
    }
    
    public List<String> OrderItemMB.getColumns() {
        return columns;
    }
    
    public List<OrderItem> OrderItemMB.getAllOrderItems() {
        return allOrderItems;
    }
    
    public void OrderItemMB.setAllOrderItems(List<OrderItem> allOrderItems) {
        this.allOrderItems = allOrderItems;
    }
    
    public String OrderItemMB.findAllOrderItems() {
        allOrderItems = orderItemService.findAllOrderItems();
        dataVisible = !allOrderItems.isEmpty();
        return null;
    }
    
    public boolean OrderItemMB.isDataVisible() {
        return dataVisible;
    }
    
    public void OrderItemMB.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid OrderItemMB.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void OrderItemMB.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid OrderItemMB.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void OrderItemMB.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid OrderItemMB.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void OrderItemMB.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid OrderItemMB.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel quantityCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        quantityCreateOutput.setFor("quantityCreateInput");
        quantityCreateOutput.setId("quantityCreateOutput");
        quantityCreateOutput.setValue("Quantity:");
        htmlPanelGrid.getChildren().add(quantityCreateOutput);
        
        InputText quantityCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        quantityCreateInput.setId("quantityCreateInput");
        quantityCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{orderItemMB.orderItem.quantity}", BigDecimal.class));
        quantityCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(quantityCreateInput);
        
        Message quantityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        quantityCreateInputMessage.setId("quantityCreateInputMessage");
        quantityCreateInputMessage.setFor("quantityCreateInput");
        quantityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(quantityCreateInputMessage);
        
        OutputLabel purchaseOrderCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        purchaseOrderCreateOutput.setFor("purchaseOrderCreateInput");
        purchaseOrderCreateOutput.setId("purchaseOrderCreateOutput");
        purchaseOrderCreateOutput.setValue("Purchase Order:");
        htmlPanelGrid.getChildren().add(purchaseOrderCreateOutput);
        
        AutoComplete purchaseOrderCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        purchaseOrderCreateInput.setId("purchaseOrderCreateInput");
        purchaseOrderCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{orderItemMB.orderItem.purchaseOrder}", PurchaseOrder.class));
        purchaseOrderCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{orderItemMB.completePurchaseOrder}", List.class, new Class[] { String.class }));
        purchaseOrderCreateInput.setDropdown(true);
        purchaseOrderCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "purchaseOrder", String.class));
        purchaseOrderCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{purchaseOrder.numberOrder} #{purchaseOrder.supplierContact} #{purchaseOrder.clientContact} #{purchaseOrder.supplierPhone}", String.class));
        purchaseOrderCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{purchaseOrder}", PurchaseOrder.class));
        purchaseOrderCreateInput.setConverter(new PurchaseOrderConverter());
        purchaseOrderCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(purchaseOrderCreateInput);
        
        Message purchaseOrderCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        purchaseOrderCreateInputMessage.setId("purchaseOrderCreateInputMessage");
        purchaseOrderCreateInputMessage.setFor("purchaseOrderCreateInput");
        purchaseOrderCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(purchaseOrderCreateInputMessage);
        
        OutputLabel productCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productCreateOutput.setFor("productCreateInput");
        productCreateOutput.setId("productCreateOutput");
        productCreateOutput.setValue("Product:");
        htmlPanelGrid.getChildren().add(productCreateOutput);
        
        AutoComplete productCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        productCreateInput.setId("productCreateInput");
        productCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{orderItemMB.orderItem.product}", ProductClient.class));
        productCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{orderItemMB.completeProduct}", List.class, new Class[] { String.class }));
        productCreateInput.setDropdown(true);
        productCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "product", String.class));
        productCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{product.code}", String.class));
        productCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{product}", ProductClient.class));
        productCreateInput.setConverter(new ProductClientConverter());
        productCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productCreateInput);
        
        Message productCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productCreateInputMessage.setId("productCreateInputMessage");
        productCreateInputMessage.setFor("productCreateInput");
        productCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productCreateInputMessage);
        
        HtmlOutputText dossierCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dossierCreateOutput.setId("dossierCreateOutput");
        dossierCreateOutput.setValue("Dossier:");
        htmlPanelGrid.getChildren().add(dossierCreateOutput);
        
        HtmlOutputText dossierCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dossierCreateInput.setId("dossierCreateInput");
        dossierCreateInput.setValue("This relationship is managed from the Dossier side");
        htmlPanelGrid.getChildren().add(dossierCreateInput);
        
        Message dossierCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dossierCreateInputMessage.setId("dossierCreateInputMessage");
        dossierCreateInputMessage.setFor("dossierCreateInput");
        dossierCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dossierCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid OrderItemMB.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel quantityEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        quantityEditOutput.setFor("quantityEditInput");
        quantityEditOutput.setId("quantityEditOutput");
        quantityEditOutput.setValue("Quantity:");
        htmlPanelGrid.getChildren().add(quantityEditOutput);
        
        InputText quantityEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        quantityEditInput.setId("quantityEditInput");
        quantityEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{orderItemMB.orderItem.quantity}", BigDecimal.class));
        quantityEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(quantityEditInput);
        
        Message quantityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        quantityEditInputMessage.setId("quantityEditInputMessage");
        quantityEditInputMessage.setFor("quantityEditInput");
        quantityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(quantityEditInputMessage);
        
        OutputLabel purchaseOrderEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        purchaseOrderEditOutput.setFor("purchaseOrderEditInput");
        purchaseOrderEditOutput.setId("purchaseOrderEditOutput");
        purchaseOrderEditOutput.setValue("Purchase Order:");
        htmlPanelGrid.getChildren().add(purchaseOrderEditOutput);
        
        AutoComplete purchaseOrderEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        purchaseOrderEditInput.setId("purchaseOrderEditInput");
        purchaseOrderEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{orderItemMB.orderItem.purchaseOrder}", PurchaseOrder.class));
        purchaseOrderEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{orderItemMB.completePurchaseOrder}", List.class, new Class[] { String.class }));
        purchaseOrderEditInput.setDropdown(true);
        purchaseOrderEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "purchaseOrder", String.class));
        purchaseOrderEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{purchaseOrder.numberOrder} #{purchaseOrder.supplierContact} #{purchaseOrder.clientContact} #{purchaseOrder.supplierPhone}", String.class));
        purchaseOrderEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{purchaseOrder}", PurchaseOrder.class));
        purchaseOrderEditInput.setConverter(new PurchaseOrderConverter());
        purchaseOrderEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(purchaseOrderEditInput);
        
        Message purchaseOrderEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        purchaseOrderEditInputMessage.setId("purchaseOrderEditInputMessage");
        purchaseOrderEditInputMessage.setFor("purchaseOrderEditInput");
        purchaseOrderEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(purchaseOrderEditInputMessage);
        
        OutputLabel productEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productEditOutput.setFor("productEditInput");
        productEditOutput.setId("productEditOutput");
        productEditOutput.setValue("Product:");
        htmlPanelGrid.getChildren().add(productEditOutput);
        
        AutoComplete productEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        productEditInput.setId("productEditInput");
        productEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{orderItemMB.orderItem.product}", ProductClient.class));
        productEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{orderItemMB.completeProduct}", List.class, new Class[] { String.class }));
        productEditInput.setDropdown(true);
        productEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "product", String.class));
        productEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{product.code}", String.class));
        productEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{product}", ProductClient.class));
        productEditInput.setConverter(new ProductClientConverter());
        productEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productEditInput);
        
        Message productEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productEditInputMessage.setId("productEditInputMessage");
        productEditInputMessage.setFor("productEditInput");
        productEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productEditInputMessage);
        
        HtmlOutputText dossierEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dossierEditOutput.setId("dossierEditOutput");
        dossierEditOutput.setValue("Dossier:");
        htmlPanelGrid.getChildren().add(dossierEditOutput);
        
        HtmlOutputText dossierEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dossierEditInput.setId("dossierEditInput");
        dossierEditInput.setValue("This relationship is managed from the Dossier side");
        htmlPanelGrid.getChildren().add(dossierEditInput);
        
        Message dossierEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dossierEditInputMessage.setId("dossierEditInputMessage");
        dossierEditInputMessage.setFor("dossierEditInput");
        dossierEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dossierEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid OrderItemMB.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText quantityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        quantityLabel.setId("quantityLabel");
        quantityLabel.setValue("Quantity:");
        htmlPanelGrid.getChildren().add(quantityLabel);
        
        HtmlOutputText quantityValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        quantityValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{orderItemMB.orderItem.quantity}", String.class));
        htmlPanelGrid.getChildren().add(quantityValue);
        
        HtmlOutputText purchaseOrderLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        purchaseOrderLabel.setId("purchaseOrderLabel");
        purchaseOrderLabel.setValue("Purchase Order:");
        htmlPanelGrid.getChildren().add(purchaseOrderLabel);
        
        HtmlOutputText purchaseOrderValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        purchaseOrderValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{orderItemMB.orderItem.purchaseOrder}", PurchaseOrder.class));
        purchaseOrderValue.setConverter(new PurchaseOrderConverter());
        htmlPanelGrid.getChildren().add(purchaseOrderValue);
        
        HtmlOutputText productLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productLabel.setId("productLabel");
        productLabel.setValue("Product:");
        htmlPanelGrid.getChildren().add(productLabel);
        
        HtmlOutputText productValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{orderItemMB.orderItem.product}", ProductClient.class));
        productValue.setConverter(new ProductClientConverter());
        htmlPanelGrid.getChildren().add(productValue);
        
        HtmlOutputText dossierLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dossierLabel.setId("dossierLabel");
        dossierLabel.setValue("Dossier:");
        htmlPanelGrid.getChildren().add(dossierLabel);
        
        HtmlOutputText dossierValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dossierValue.setId("dossierValue");
        dossierValue.setValue("This relationship is managed from the Dossier side");
        htmlPanelGrid.getChildren().add(dossierValue);
        
        return htmlPanelGrid;
    }
    
    public OrderItem OrderItemMB.getOrderItem() {
        if (orderItem == null) {
            orderItem = new OrderItem();
        }
        return orderItem;
    }
    
    public void OrderItemMB.setOrderItem(OrderItem orderItem) {
        this.orderItem = orderItem;
    }
    
    public List<PurchaseOrder> OrderItemMB.completePurchaseOrder(String query) {
        List<PurchaseOrder> suggestions = new ArrayList<PurchaseOrder>();
        for (PurchaseOrder purchaseOrder : purchaseOrderService.findAllPurchaseOrders()) {
            String purchaseOrderStr = String.valueOf(purchaseOrder.getNumberOrder() +  " "  + purchaseOrder.getSupplierContact() +  " "  + purchaseOrder.getClientContact() +  " "  + purchaseOrder.getSupplierPhone());
            if (purchaseOrderStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(purchaseOrder);
            }
        }
        return suggestions;
    }
    
    public List<ProductClient> OrderItemMB.completeProduct(String query) {
        List<ProductClient> suggestions = new ArrayList<ProductClient>();
        for (ProductClient productClient : productClientService.findAllProductClients()) {
            String productClientStr = String.valueOf(productClient.getCode());
            if (productClientStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(productClient);
            }
        }
        return suggestions;
    }
    
    public List<Dossier> OrderItemMB.getSelectedDossier() {
        return selectedDossier;
    }
    
    public void OrderItemMB.setSelectedDossier(List<Dossier> selectedDossier) {
        if (selectedDossier != null) {
            orderItem.setDossier(new HashSet<Dossier>(selectedDossier));
        }
        this.selectedDossier = selectedDossier;
    }
    
    public String OrderItemMB.onEdit() {
        if (orderItem != null && orderItem.getDossier() != null) {
            selectedDossier = new ArrayList<Dossier>(orderItem.getDossier());
        }
        return null;
    }
    
    public boolean OrderItemMB.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void OrderItemMB.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String OrderItemMB.displayList() {
        createDialogVisible = false;
        findAllOrderItems();
        return "orderItem";
    }
    
    public String OrderItemMB.displayCreateDialog() {
        orderItem = new OrderItem();
        createDialogVisible = true;
        return "orderItem";
    }
    
    public String OrderItemMB.persist() {
        String message = "";
        if (orderItem.getId() != null) {
            orderItemService.updateOrderItem(orderItem);
            message = "message_successfully_updated";
        } else {
            orderItemService.saveOrderItem(orderItem);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "OrderItem");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllOrderItems();
    }
    
    public String OrderItemMB.delete() {
        orderItemService.deleteOrderItem(orderItem);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "OrderItem");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllOrderItems();
    }
    
    public void OrderItemMB.reset() {
        orderItem = null;
        selectedDossier = null;
        createDialogVisible = false;
    }
    
    public void OrderItemMB.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
