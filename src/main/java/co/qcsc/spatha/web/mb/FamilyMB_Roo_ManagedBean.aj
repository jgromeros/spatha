// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.web.mb;

import co.qcsc.spatha.domain.product.Family;
import co.qcsc.spatha.domain.product.Product;
import co.qcsc.spatha.service.product.FamilyService;
import co.qcsc.spatha.web.mb.FamilyMB;
import co.qcsc.spatha.web.mb.util.MessageFactory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect FamilyMB_Roo_ManagedBean {
    
    declare @type: FamilyMB: @ManagedBean(name = "familyMB");
    
    declare @type: FamilyMB: @SessionScoped;
    
    @Autowired
    FamilyService FamilyMB.familyService;
    
    private String FamilyMB.name = "Familys";
    
    private Family FamilyMB.family;
    
    private List<Family> FamilyMB.allFamilys;
    
    private boolean FamilyMB.dataVisible = false;
    
    private List<String> FamilyMB.columns;
    
    private HtmlPanelGrid FamilyMB.createPanelGrid;
    
    private HtmlPanelGrid FamilyMB.editPanelGrid;
    
    private HtmlPanelGrid FamilyMB.viewPanelGrid;
    
    private boolean FamilyMB.createDialogVisible = false;
    
    private List<Product> FamilyMB.selectedProducts;
    
    @PostConstruct
    public void FamilyMB.init() {
        columns = new ArrayList<String>();
        columns.add("name");
    }
    
    public String FamilyMB.getName() {
        return name;
    }
    
    public List<String> FamilyMB.getColumns() {
        return columns;
    }
    
    public List<Family> FamilyMB.getAllFamilys() {
        return allFamilys;
    }
    
    public void FamilyMB.setAllFamilys(List<Family> allFamilys) {
        this.allFamilys = allFamilys;
    }
    
    public String FamilyMB.findAllFamilys() {
        allFamilys = familyService.findAllFamilys();
        dataVisible = !allFamilys.isEmpty();
        return null;
    }
    
    public boolean FamilyMB.isDataVisible() {
        return dataVisible;
    }
    
    public void FamilyMB.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid FamilyMB.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void FamilyMB.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid FamilyMB.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void FamilyMB.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid FamilyMB.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void FamilyMB.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid FamilyMB.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{familyMB.family.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMinimum(2);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        HtmlOutputText productsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsCreateOutput.setId("productsCreateOutput");
        productsCreateOutput.setValue("Products:");
        htmlPanelGrid.getChildren().add(productsCreateOutput);
        
        HtmlOutputText productsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsCreateInput.setId("productsCreateInput");
        productsCreateInput.setValue("This relationship is managed from the Product side");
        htmlPanelGrid.getChildren().add(productsCreateInput);
        
        Message productsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productsCreateInputMessage.setId("productsCreateInputMessage");
        productsCreateInputMessage.setFor("productsCreateInput");
        productsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FamilyMB.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{familyMB.family.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMinimum(2);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        HtmlOutputText productsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsEditOutput.setId("productsEditOutput");
        productsEditOutput.setValue("Products:");
        htmlPanelGrid.getChildren().add(productsEditOutput);
        
        HtmlOutputText productsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsEditInput.setId("productsEditInput");
        productsEditInput.setValue("This relationship is managed from the Product side");
        htmlPanelGrid.getChildren().add(productsEditInput);
        
        Message productsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productsEditInputMessage.setId("productsEditInputMessage");
        productsEditInputMessage.setFor("productsEditInput");
        productsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FamilyMB.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{familyMB.family.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText productsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsLabel.setId("productsLabel");
        productsLabel.setValue("Products:");
        htmlPanelGrid.getChildren().add(productsLabel);
        
        HtmlOutputText productsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsValue.setId("productsValue");
        productsValue.setValue("This relationship is managed from the Product side");
        htmlPanelGrid.getChildren().add(productsValue);
        
        return htmlPanelGrid;
    }
    
    public Family FamilyMB.getFamily() {
        if (family == null) {
            family = new Family();
        }
        return family;
    }
    
    public void FamilyMB.setFamily(Family family) {
        this.family = family;
    }
    
    public List<Product> FamilyMB.getSelectedProducts() {
        return selectedProducts;
    }
    
    public void FamilyMB.setSelectedProducts(List<Product> selectedProducts) {
        if (selectedProducts != null) {
            family.setProducts(new HashSet<Product>(selectedProducts));
        }
        this.selectedProducts = selectedProducts;
    }
    
    public String FamilyMB.onEdit() {
        if (family != null && family.getProducts() != null) {
            selectedProducts = new ArrayList<Product>(family.getProducts());
        }
        return null;
    }
    
    public boolean FamilyMB.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void FamilyMB.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String FamilyMB.displayList() {
        createDialogVisible = false;
        findAllFamilys();
        return "family";
    }
    
    public String FamilyMB.displayCreateDialog() {
        family = new Family();
        createDialogVisible = true;
        return "family";
    }
    
    public String FamilyMB.persist() {
        String message = "";
        if (family.getId() != null) {
            familyService.updateFamily(family);
            message = "message_successfully_updated";
        } else {
            familyService.saveFamily(family);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Family");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFamilys();
    }
    
    public String FamilyMB.delete() {
        familyService.deleteFamily(family);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Family");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFamilys();
    }
    
    public void FamilyMB.reset() {
        family = null;
        selectedProducts = null;
        createDialogVisible = false;
    }
    
    public void FamilyMB.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
