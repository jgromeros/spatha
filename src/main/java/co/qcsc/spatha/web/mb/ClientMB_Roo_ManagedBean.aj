// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package co.qcsc.spatha.web.mb;

import co.qcsc.spatha.domain.product.ProductClient;
import co.qcsc.spatha.domain.thirdparty.Client;
import co.qcsc.spatha.service.thirdparty.ClientService;
import co.qcsc.spatha.web.mb.ClientMB;
import co.qcsc.spatha.web.mb.util.MessageFactory;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;

import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect ClientMB_Roo_ManagedBean {
    
    declare @type: ClientMB: @ManagedBean(name = "clientMB");
    
    declare @type: ClientMB: @SessionScoped;
    
    @Autowired
    ClientService ClientMB.clientService;
    
    private String ClientMB.name = "Clients";
    
    private Client ClientMB.client;
    
    private List<Client> ClientMB.allClients;
    
    private boolean ClientMB.dataVisible = false;
    
    private List<String> ClientMB.columns;
    
    private HtmlPanelGrid ClientMB.createPanelGrid;
    
    private HtmlPanelGrid ClientMB.editPanelGrid;
    
    private HtmlPanelGrid ClientMB.viewPanelGrid;
    
    private boolean ClientMB.createDialogVisible = false;
    
    private List<ProductClient> ClientMB.selectedProducts;
    
    @PostConstruct
    public void ClientMB.init() {
        columns = new ArrayList<String>();
        columns.add("identification");
        columns.add("name");
    }
    
    public String ClientMB.getName() {
        return name;
    }
    
    public List<String> ClientMB.getColumns() {
        return columns;
    }
    
    public List<Client> ClientMB.getAllClients() {
        return allClients;
    }
    
    public void ClientMB.setAllClients(List<Client> allClients) {
        this.allClients = allClients;
    }
    
    public String ClientMB.findAllClients() {
        allClients = clientService.findAllClients();
        dataVisible = !allClients.isEmpty();
        return null;
    }
    
    public boolean ClientMB.isDataVisible() {
        return dataVisible;
    }
    
    public void ClientMB.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ClientMB.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ClientMB.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ClientMB.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ClientMB.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ClientMB.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ClientMB.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ClientMB.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel identificationCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identificationCreateOutput.setFor("identificationCreateInput");
        identificationCreateOutput.setId("identificationCreateOutput");
        identificationCreateOutput.setValue("Identification:");
        htmlPanelGrid.getChildren().add(identificationCreateOutput);
        
        InputText identificationCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        identificationCreateInput.setId("identificationCreateInput");
        identificationCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clientMB.client.identification}", String.class));
        LengthValidator identificationCreateInputValidator = new LengthValidator();
        identificationCreateInputValidator.setMinimum(2);
        identificationCreateInput.addValidator(identificationCreateInputValidator);
        identificationCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(identificationCreateInput);
        
        Message identificationCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identificationCreateInputMessage.setId("identificationCreateInputMessage");
        identificationCreateInputMessage.setFor("identificationCreateInput");
        identificationCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identificationCreateInputMessage);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clientMB.client.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMinimum(2);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel dossierDescriptionsCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dossierDescriptionsCreateOutput.setFor("dossierDescriptionsCreateInput");
        dossierDescriptionsCreateOutput.setId("dossierDescriptionsCreateOutput");
        dossierDescriptionsCreateOutput.setValue("Dossier Descriptions:");
        htmlPanelGrid.getChildren().add(dossierDescriptionsCreateOutput);
        
        InputText dossierDescriptionsCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        dossierDescriptionsCreateInput.setId("dossierDescriptionsCreateInput");
        dossierDescriptionsCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clientMB.client.dossierDescriptions}", Set.class));
        dossierDescriptionsCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dossierDescriptionsCreateInput);
        
        Message dossierDescriptionsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dossierDescriptionsCreateInputMessage.setId("dossierDescriptionsCreateInputMessage");
        dossierDescriptionsCreateInputMessage.setFor("dossierDescriptionsCreateInput");
        dossierDescriptionsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dossierDescriptionsCreateInputMessage);
        
        HtmlOutputText productsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsCreateOutput.setId("productsCreateOutput");
        productsCreateOutput.setValue("Products:");
        htmlPanelGrid.getChildren().add(productsCreateOutput);
        
        HtmlOutputText productsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsCreateInput.setId("productsCreateInput");
        productsCreateInput.setValue("This relationship is managed from the ProductClient side");
        htmlPanelGrid.getChildren().add(productsCreateInput);
        
        Message productsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productsCreateInputMessage.setId("productsCreateInputMessage");
        productsCreateInputMessage.setFor("productsCreateInput");
        productsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ClientMB.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel identificationEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identificationEditOutput.setFor("identificationEditInput");
        identificationEditOutput.setId("identificationEditOutput");
        identificationEditOutput.setValue("Identification:");
        htmlPanelGrid.getChildren().add(identificationEditOutput);
        
        InputText identificationEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        identificationEditInput.setId("identificationEditInput");
        identificationEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clientMB.client.identification}", String.class));
        LengthValidator identificationEditInputValidator = new LengthValidator();
        identificationEditInputValidator.setMinimum(2);
        identificationEditInput.addValidator(identificationEditInputValidator);
        identificationEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(identificationEditInput);
        
        Message identificationEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identificationEditInputMessage.setId("identificationEditInputMessage");
        identificationEditInputMessage.setFor("identificationEditInput");
        identificationEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identificationEditInputMessage);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clientMB.client.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMinimum(2);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel dossierDescriptionsEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dossierDescriptionsEditOutput.setFor("dossierDescriptionsEditInput");
        dossierDescriptionsEditOutput.setId("dossierDescriptionsEditOutput");
        dossierDescriptionsEditOutput.setValue("Dossier Descriptions:");
        htmlPanelGrid.getChildren().add(dossierDescriptionsEditOutput);
        
        InputText dossierDescriptionsEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        dossierDescriptionsEditInput.setId("dossierDescriptionsEditInput");
        dossierDescriptionsEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clientMB.client.dossierDescriptions}", Set.class));
        dossierDescriptionsEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dossierDescriptionsEditInput);
        
        Message dossierDescriptionsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dossierDescriptionsEditInputMessage.setId("dossierDescriptionsEditInputMessage");
        dossierDescriptionsEditInputMessage.setFor("dossierDescriptionsEditInput");
        dossierDescriptionsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dossierDescriptionsEditInputMessage);
        
        HtmlOutputText productsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsEditOutput.setId("productsEditOutput");
        productsEditOutput.setValue("Products:");
        htmlPanelGrid.getChildren().add(productsEditOutput);
        
        HtmlOutputText productsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsEditInput.setId("productsEditInput");
        productsEditInput.setValue("This relationship is managed from the ProductClient side");
        htmlPanelGrid.getChildren().add(productsEditInput);
        
        Message productsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productsEditInputMessage.setId("productsEditInputMessage");
        productsEditInputMessage.setFor("productsEditInput");
        productsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ClientMB.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText identificationLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identificationLabel.setId("identificationLabel");
        identificationLabel.setValue("Identification:");
        htmlPanelGrid.getChildren().add(identificationLabel);
        
        HtmlOutputText identificationValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identificationValue.setId("identificationValue");
        identificationValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clientMB.client.identification}", String.class));
        htmlPanelGrid.getChildren().add(identificationValue);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clientMB.client.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText dossierDescriptionsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dossierDescriptionsLabel.setId("dossierDescriptionsLabel");
        dossierDescriptionsLabel.setValue("Dossier Descriptions:");
        htmlPanelGrid.getChildren().add(dossierDescriptionsLabel);
        
        HtmlOutputText dossierDescriptionsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dossierDescriptionsValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clientMB.client.dossierDescriptions}", String.class));
        htmlPanelGrid.getChildren().add(dossierDescriptionsValue);
        
        HtmlOutputText productsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsLabel.setId("productsLabel");
        productsLabel.setValue("Products:");
        htmlPanelGrid.getChildren().add(productsLabel);
        
        HtmlOutputText productsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productsValue.setId("productsValue");
        productsValue.setValue("This relationship is managed from the ProductClient side");
        htmlPanelGrid.getChildren().add(productsValue);
        
        return htmlPanelGrid;
    }
    
    public Client ClientMB.getClient() {
        if (client == null) {
            client = new Client();
        }
        return client;
    }
    
    public void ClientMB.setClient(Client client) {
        this.client = client;
    }
    
    public List<ProductClient> ClientMB.getSelectedProducts() {
        return selectedProducts;
    }
    
    public void ClientMB.setSelectedProducts(List<ProductClient> selectedProducts) {
        if (selectedProducts != null) {
            client.setProducts(new HashSet<ProductClient>(selectedProducts));
        }
        this.selectedProducts = selectedProducts;
    }
    
    public String ClientMB.onEdit() {
        if (client != null && client.getProducts() != null) {
            selectedProducts = new ArrayList<ProductClient>(client.getProducts());
        }
        return null;
    }
    
    public boolean ClientMB.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ClientMB.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ClientMB.displayList() {
        createDialogVisible = false;
        findAllClients();
        return "client";
    }
    
    public String ClientMB.displayCreateDialog() {
        client = new Client();
        createDialogVisible = true;
        return "client";
    }
    
    public String ClientMB.persist() {
        String message = "";
        if (client.getId() != null) {
            clientService.updateClient(client);
            message = "message_successfully_updated";
        } else {
            clientService.saveClient(client);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Client");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllClients();
    }
    
    public String ClientMB.delete() {
        clientService.deleteClient(client);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Client");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllClients();
    }
    
    public void ClientMB.reset() {
        client = null;
        selectedProducts = null;
        createDialogVisible = false;
    }
    
    public void ClientMB.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
